// Package http provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package http

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
)

const (
	ApiKeyAuthScopes   = "ApiKeyAuth.Scopes"
	ApiSignScopes      = "ApiSign.Scopes"
	ApiTimestampScopes = "ApiTimestamp.Scopes"
)

// Defines values for BalanceHistoryTradeType.
const (
	BalanceHistoryTradeTypeBUY        BalanceHistoryTradeType = "BUY"
	BalanceHistoryTradeTypeCANCELCOLL BalanceHistoryTradeType = "CANCEL_COLL"
	BalanceHistoryTradeTypeDEPOSIT    BalanceHistoryTradeType = "DEPOSIT"
	BalanceHistoryTradeTypeFEE        BalanceHistoryTradeType = "FEE"
	BalanceHistoryTradeTypePAYMENT    BalanceHistoryTradeType = "PAYMENT"
	BalanceHistoryTradeTypePOSTCOLL   BalanceHistoryTradeType = "POST_COLL"
	BalanceHistoryTradeTypeSELL       BalanceHistoryTradeType = "SELL"
	BalanceHistoryTradeTypeTRANSFER   BalanceHistoryTradeType = "TRANSFER"
	BalanceHistoryTradeTypeWITHDRAW   BalanceHistoryTradeType = "WITHDRAW"
)

// Defines values for BoardStateHealth.
const (
	BoardStateHealthBUSY      BoardStateHealth = "BUSY"
	BoardStateHealthNOORDER   BoardStateHealth = "NO ORDER"
	BoardStateHealthNORMAL    BoardStateHealth = "NORMAL"
	BoardStateHealthSTOP      BoardStateHealth = "STOP"
	BoardStateHealthSUPERBUSY BoardStateHealth = "SUPER BUSY"
	BoardStateHealthVERYBUSY  BoardStateHealth = "VERY BUSY"
)

// Defines values for BoardStateState.
const (
	CIRCUITBREAK BoardStateState = "CIRCUIT BREAK"
	CLOSED       BoardStateState = "CLOSED"
	MATURED      BoardStateState = "MATURED"
	PREOPEN      BoardStateState = "PREOPEN"
	RUNNING      BoardStateState = "RUNNING"
	STARTING     BoardStateState = "STARTING"
)

// Defines values for ChildOrderChildOrderState.
const (
	ChildOrderChildOrderStateACTIVE    ChildOrderChildOrderState = "ACTIVE"
	ChildOrderChildOrderStateCANCELED  ChildOrderChildOrderState = "CANCELED"
	ChildOrderChildOrderStateCOMPLETED ChildOrderChildOrderState = "COMPLETED"
	ChildOrderChildOrderStateEXPIRED   ChildOrderChildOrderState = "EXPIRED"
	ChildOrderChildOrderStateREJECTED  ChildOrderChildOrderState = "REJECTED"
)

// Defines values for ChildOrderChildOrderType.
const (
	ChildOrderChildOrderTypeLIMIT  ChildOrderChildOrderType = "LIMIT"
	ChildOrderChildOrderTypeMARKET ChildOrderChildOrderType = "MARKET"
)

// Defines values for ChildOrderSide.
const (
	ChildOrderSideBUY  ChildOrderSide = "BUY"
	ChildOrderSideSELL ChildOrderSide = "SELL"
)

// Defines values for ChildOrderTimeInForce.
const (
	ChildOrderTimeInForceFOK ChildOrderTimeInForce = "FOK"
	ChildOrderTimeInForceGTC ChildOrderTimeInForce = "GTC"
	ChildOrderTimeInForceIOC ChildOrderTimeInForce = "IOC"
)

// Defines values for ExchangeHealthStatus.
const (
	ExchangeHealthStatusBUSY      ExchangeHealthStatus = "BUSY"
	ExchangeHealthStatusNOORDER   ExchangeHealthStatus = "NO ORDER"
	ExchangeHealthStatusNORMAL    ExchangeHealthStatus = "NORMAL"
	ExchangeHealthStatusSTOP      ExchangeHealthStatus = "STOP"
	ExchangeHealthStatusSUPERBUSY ExchangeHealthStatus = "SUPER BUSY"
	ExchangeHealthStatusVERYBUSY  ExchangeHealthStatus = "VERY BUSY"
)

// Defines values for MarketMarketType.
const (
	FX   MarketMarketType = "FX"
	Spot MarketMarketType = "Spot"
)

// Defines values for NewOrderRequestChildOrderType.
const (
	NewOrderRequestChildOrderTypeLIMIT  NewOrderRequestChildOrderType = "LIMIT"
	NewOrderRequestChildOrderTypeMARKET NewOrderRequestChildOrderType = "MARKET"
)

// Defines values for NewOrderRequestSide.
const (
	NewOrderRequestSideBUY  NewOrderRequestSide = "BUY"
	NewOrderRequestSideSELL NewOrderRequestSide = "SELL"
)

// Defines values for NewOrderRequestTimeInForce.
const (
	NewOrderRequestTimeInForceFOK NewOrderRequestTimeInForce = "FOK"
	NewOrderRequestTimeInForceGTC NewOrderRequestTimeInForce = "GTC"
	NewOrderRequestTimeInForceIOC NewOrderRequestTimeInForce = "IOC"
)

// Defines values for NewParentOrderRequestOrderMethod.
const (
	NewParentOrderRequestOrderMethodIFD    NewParentOrderRequestOrderMethod = "IFD"
	NewParentOrderRequestOrderMethodIFDOCO NewParentOrderRequestOrderMethod = "IFDOCO"
	NewParentOrderRequestOrderMethodOCO    NewParentOrderRequestOrderMethod = "OCO"
	NewParentOrderRequestOrderMethodSIMPLE NewParentOrderRequestOrderMethod = "SIMPLE"
)

// Defines values for NewParentOrderRequestTimeInForce.
const (
	FOK NewParentOrderRequestTimeInForce = "FOK"
	GTC NewParentOrderRequestTimeInForce = "GTC"
	IOC NewParentOrderRequestTimeInForce = "IOC"
)

// Defines values for ParentOrderParentOrderState.
const (
	ParentOrderParentOrderStateACTIVE    ParentOrderParentOrderState = "ACTIVE"
	ParentOrderParentOrderStateCANCELED  ParentOrderParentOrderState = "CANCELED"
	ParentOrderParentOrderStateCOMPLETED ParentOrderParentOrderState = "COMPLETED"
	ParentOrderParentOrderStateEXPIRED   ParentOrderParentOrderState = "EXPIRED"
	ParentOrderParentOrderStateREJECTED  ParentOrderParentOrderState = "REJECTED"
)

// Defines values for ParentOrderParentOrderType.
const (
	ParentOrderParentOrderTypeIFD       ParentOrderParentOrderType = "IFD"
	ParentOrderParentOrderTypeIFDOCO    ParentOrderParentOrderType = "IFDOCO"
	ParentOrderParentOrderTypeLIMIT     ParentOrderParentOrderType = "LIMIT"
	ParentOrderParentOrderTypeMARKET    ParentOrderParentOrderType = "MARKET"
	ParentOrderParentOrderTypeOCO       ParentOrderParentOrderType = "OCO"
	ParentOrderParentOrderTypeSTOP      ParentOrderParentOrderType = "STOP"
	ParentOrderParentOrderTypeSTOPLIMIT ParentOrderParentOrderType = "STOP_LIMIT"
	ParentOrderParentOrderTypeTRAIL     ParentOrderParentOrderType = "TRAIL"
)

// Defines values for ParentOrderDetailOrderMethod.
const (
	IFD    ParentOrderDetailOrderMethod = "IFD"
	IFDOCO ParentOrderDetailOrderMethod = "IFDOCO"
	OCO    ParentOrderDetailOrderMethod = "OCO"
	SIMPLE ParentOrderDetailOrderMethod = "SIMPLE"
)

// Defines values for ParentOrderParameterConditionType.
const (
	LIMIT     ParentOrderParameterConditionType = "LIMIT"
	MARKET    ParentOrderParameterConditionType = "MARKET"
	STOP      ParentOrderParameterConditionType = "STOP"
	STOPLIMIT ParentOrderParameterConditionType = "STOP_LIMIT"
	TRAIL     ParentOrderParameterConditionType = "TRAIL"
)

// Defines values for ParentOrderParameterSide.
const (
	ParentOrderParameterSideBUY  ParentOrderParameterSide = "BUY"
	ParentOrderParameterSideSELL ParentOrderParameterSide = "SELL"
)

// Defines values for ChildOrderState.
const (
	ChildOrderStateACTIVE    ChildOrderState = "ACTIVE"
	ChildOrderStateCANCELED  ChildOrderState = "CANCELED"
	ChildOrderStateCOMPLETED ChildOrderState = "COMPLETED"
	ChildOrderStateEXPIRED   ChildOrderState = "EXPIRED"
	ChildOrderStateREJECTED  ChildOrderState = "REJECTED"
)

// Defines values for ParentOrderState.
const (
	ParentOrderStateACTIVE    ParentOrderState = "ACTIVE"
	ParentOrderStateCANCELED  ParentOrderState = "CANCELED"
	ParentOrderStateCOMPLETED ParentOrderState = "COMPLETED"
	ParentOrderStateEXPIRED   ParentOrderState = "EXPIRED"
	ParentOrderStateREJECTED  ParentOrderState = "REJECTED"
)

// Defines values for GetV1MeGetchildordersParamsChildOrderState.
const (
	GetV1MeGetchildordersParamsChildOrderStateACTIVE    GetV1MeGetchildordersParamsChildOrderState = "ACTIVE"
	GetV1MeGetchildordersParamsChildOrderStateCANCELED  GetV1MeGetchildordersParamsChildOrderState = "CANCELED"
	GetV1MeGetchildordersParamsChildOrderStateCOMPLETED GetV1MeGetchildordersParamsChildOrderState = "COMPLETED"
	GetV1MeGetchildordersParamsChildOrderStateEXPIRED   GetV1MeGetchildordersParamsChildOrderState = "EXPIRED"
	GetV1MeGetchildordersParamsChildOrderStateREJECTED  GetV1MeGetchildordersParamsChildOrderState = "REJECTED"
)

// Defines values for GetV1MeGetparentordersParamsParentOrderState.
const (
	GetV1MeGetparentordersParamsParentOrderStateACTIVE    GetV1MeGetparentordersParamsParentOrderState = "ACTIVE"
	GetV1MeGetparentordersParamsParentOrderStateCANCELED  GetV1MeGetparentordersParamsParentOrderState = "CANCELED"
	GetV1MeGetparentordersParamsParentOrderStateCOMPLETED GetV1MeGetparentordersParamsParentOrderState = "COMPLETED"
	GetV1MeGetparentordersParamsParentOrderStateEXPIRED   GetV1MeGetparentordersParamsParentOrderState = "EXPIRED"
	GetV1MeGetparentordersParamsParentOrderStateREJECTED  GetV1MeGetparentordersParamsParentOrderState = "REJECTED"
)

// Address defines model for Address.
type Address struct {
	// Address アドレス
	Address *string `json:"address,omitempty"`

	// CurrencyCode 通貨
	CurrencyCode *string `json:"currency_code,omitempty"`

	// Type 種別 (NORMAL など)
	Type *string `json:"type,omitempty"`
}

// Balance defines model for Balance.
type Balance struct {
	// Amount 緋計金額
	Amount *float32 `json:"amount,omitempty"`

	// Available 利用可能金額
	Available *float32 `json:"available,omitempty"`

	// CurrencyCode 通貨
	CurrencyCode *string `json:"currency_code,omitempty"`
}

// BalanceHistory defines model for BalanceHistory.
type BalanceHistory struct {
	// Amount 金額
	Amount *float32 `json:"amount,omitempty"`

	// Balance 残高
	Balance *float32 `json:"balance,omitempty"`

	// Commission 手数料
	Commission *float32 `json:"commission,omitempty"`

	// CurrencyCode 通貨
	CurrencyCode *string `json:"currency_code,omitempty"`

	// EventDate 取得所時間(UTC)
	EventDate *time.Time `json:"event_date,omitempty"`

	// Id ID
	Id *int `json:"id,omitempty"`

	// OrderId order_id
	OrderId *string `json:"order_id,omitempty"`

	// Price 価格
	Price *float32 `json:"price,omitempty"`

	// ProductCode プロダクトコード
	ProductCode *string `json:"product_code,omitempty"`

	// Quantity 数量
	Quantity *float32 `json:"quantity,omitempty"`

	// TradeDate 古いデータ(JST)
	TradeDate *time.Time `json:"trade_date,omitempty"`

	// TradeType 取得所型
	TradeType *BalanceHistoryTradeType `json:"trade_type,omitempty"`
}

// BalanceHistoryTradeType 取得所型
type BalanceHistoryTradeType string

// BankAccount defines model for BankAccount.
type BankAccount struct {
	// AccountName 口座名義
	AccountName *string `json:"account_name,omitempty"`

	// AccountNumber 口座番号
	AccountNumber *string `json:"account_number,omitempty"`

	// AccountType 口座種別
	AccountType *string `json:"account_type,omitempty"`

	// BankName 銀行名
	BankName *string `json:"bank_name,omitempty"`

	// BranchName 支店名
	BranchName *string `json:"branch_name,omitempty"`

	// Id ID
	Id *int `json:"id,omitempty"`

	// IsVerified 認証済みか
	IsVerified *bool `json:"is_verified,omitempty"`
}

// Board defines model for Board.
type Board struct {
	// Asks アスクリスト
	Asks *[]BoardEntry `json:"asks,omitempty"`

	// Bids ビッドリスト
	Bids *[]BoardEntry `json:"bids,omitempty"`

	// MidPrice 中間価格
	MidPrice *float32 `json:"mid_price,omitempty"`
}

// BoardEntry defines model for BoardEntry.
type BoardEntry struct {
	// Price 価格
	Price *float32 `json:"price,omitempty"`

	// Size 量
	Size *float32 `json:"size,omitempty"`
}

// BoardState defines model for BoardState.
type BoardState struct {
	// Data 詳細データ (MATURED状態のみ)
	Data *struct {
		// SpecialQuotation 総正計
		SpecialQuotation *float32 `json:"special_quotation,omitempty"`
	} `json:"data,omitempty"`

	// Health 取得所状態
	Health *BoardStateHealth `json:"health,omitempty"`

	// State ボード状態
	State *BoardStateState `json:"state,omitempty"`
}

// BoardStateHealth 取得所状態
type BoardStateHealth string

// BoardStateState ボード状態
type BoardStateState string

// CancelAllOrdersRequest defines model for CancelAllOrdersRequest.
type CancelAllOrdersRequest struct {
	// ProductCode キャンセル対象のプロダクトコード
	ProductCode string `json:"product_code"`
}

// CancelChildOrderRequest defines model for CancelChildOrderRequest.
type CancelChildOrderRequest struct {
	// ChildOrderAcceptanceId キャンセル対象の API接受ID
	ChildOrderAcceptanceId *string `json:"child_order_acceptance_id,omitempty"`

	// ChildOrderId キャンセル対象の子注文ID
	ChildOrderId *string `json:"child_order_id,omitempty"`

	// ProductCode プロダクトコード
	ProductCode string `json:"product_code"`
}

// CancelParentOrderRequest defines model for CancelParentOrderRequest.
type CancelParentOrderRequest struct {
	// ParentOrderAcceptanceId キャンセル対象の API接受ID
	ParentOrderAcceptanceId *string `json:"parent_order_acceptance_id,omitempty"`

	// ParentOrderId キャンセル対象の親注文ID
	ParentOrderId *string `json:"parent_order_id,omitempty"`

	// ProductCode プロダクトコード
	ProductCode string `json:"product_code"`
}

// CashDeposit defines model for CashDeposit.
type CashDeposit struct {
	// Amount 額
	Amount *float32 `json:"amount,omitempty"`

	// CurrencyCode 通貨
	CurrencyCode *string `json:"currency_code,omitempty"`

	// EventDate 日時
	EventDate *time.Time `json:"event_date,omitempty"`

	// Id ID
	Id *int `json:"id,omitempty"`

	// OrderId order_id
	OrderId *string `json:"order_id,omitempty"`

	// Status "PENDING"または"COMPLETED"
	Status *string `json:"status,omitempty"`
}

// ChatMessage defines model for ChatMessage.
type ChatMessage struct {
	// Date 投稿時間
	Date *time.Time `json:"date,omitempty"`

	// Message メッセージ内容
	Message *string `json:"message,omitempty"`

	// Nickname ニックネーム
	Nickname *string `json:"nickname,omitempty"`
}

// ChildOrder defines model for ChildOrder.
type ChildOrder struct {
	// AveragePrice 平均清算価格
	AveragePrice *float32 `json:"average_price,omitempty"`

	// CancelSize キャンセル量
	CancelSize *float32 `json:"cancel_size,omitempty"`

	// ChildOrderAcceptanceId API接受ID
	ChildOrderAcceptanceId *string `json:"child_order_acceptance_id,omitempty"`

	// ChildOrderDate 注文日時
	ChildOrderDate *time.Time `json:"child_order_date,omitempty"`

	// ChildOrderId 子注文ID
	ChildOrderId *string `json:"child_order_id,omitempty"`

	// ChildOrderState 注文状態
	ChildOrderState *ChildOrderChildOrderState `json:"child_order_state,omitempty"`

	// ChildOrderType "LIMIT"または"MARKET"
	ChildOrderType *ChildOrderChildOrderType `json:"child_order_type,omitempty"`

	// ExecutedSize 実行済み量
	ExecutedSize *float32 `json:"executed_size,omitempty"`

	// ExpireDate 有効期限
	ExpireDate *time.Time `json:"expire_date,omitempty"`

	// Id ID
	Id *int `json:"id,omitempty"`

	// OutstandingSize 未繰購量
	OutstandingSize *float32 `json:"outstanding_size,omitempty"`

	// Price 注文価格
	Price *float32 `json:"price,omitempty"`

	// ProductCode プロダクトコード
	ProductCode *string `json:"product_code,omitempty"`

	// Side "BUY"または"SELL"
	Side *ChildOrderSide `json:"side,omitempty"`

	// Size 注文量
	Size *float32 `json:"size,omitempty"`

	// TimeInForce "GTC"、"IOC"、"FOK"
	TimeInForce *ChildOrderTimeInForce `json:"time_in_force,omitempty"`

	// TotalCommission 取得手数料
	TotalCommission *float32 `json:"total_commission,omitempty"`
}

// ChildOrderChildOrderState 注文状態
type ChildOrderChildOrderState string

// ChildOrderChildOrderType "LIMIT"または"MARKET"
type ChildOrderChildOrderType string

// ChildOrderSide "BUY"または"SELL"
type ChildOrderSide string

// ChildOrderTimeInForce "GTC"、"IOC"、"FOK"
type ChildOrderTimeInForce string

// ChildOrderResult defines model for ChildOrderResult.
type ChildOrderResult struct {
	// ChildOrderAcceptanceId 新規注文の接受ID
	ChildOrderAcceptanceId *string `json:"child_order_acceptance_id,omitempty"`
}

// CoinIn defines model for CoinIn.
type CoinIn struct {
	// Address アドレス
	Address *string `json:"address,omitempty"`

	// Amount 額
	Amount *float32 `json:"amount,omitempty"`

	// CurrencyCode 通貨
	CurrencyCode *string `json:"currency_code,omitempty"`

	// EventDate 日時
	EventDate *time.Time `json:"event_date,omitempty"`

	// Id ID
	Id *int `json:"id,omitempty"`

	// OrderId order_id
	OrderId *string `json:"order_id,omitempty"`

	// Status "PENDING"または"COMPLETED"
	Status *string `json:"status,omitempty"`

	// TxHash Txハッシュ
	TxHash *string `json:"tx_hash,omitempty"`
}

// CoinOut defines model for CoinOut.
type CoinOut struct {
	// AdditionalFee 利用料
	AdditionalFee *float32 `json:"additional_fee,omitempty"`

	// Address 送信先アドレス
	Address *string `json:"address,omitempty"`

	// Amount 額
	Amount *float32 `json:"amount,omitempty"`

	// CurrencyCode 通貨
	CurrencyCode *string `json:"currency_code,omitempty"`

	// EventDate 日時
	EventDate *time.Time `json:"event_date,omitempty"`

	// Fee 手数料
	Fee *float32 `json:"fee,omitempty"`

	// Id ID
	Id *int `json:"id,omitempty"`

	// OrderId order_id
	OrderId *string `json:"order_id,omitempty"`

	// Status "PENDING"または"COMPLETED"
	Status *string `json:"status,omitempty"`

	// TxHash Txハッシュ
	TxHash *string `json:"tx_hash,omitempty"`
}

// Collateral defines model for Collateral.
type Collateral struct {
	// Collateral 存入額(JPY)
	Collateral *float32 `json:"collateral,omitempty"`

	// KeepRate 維持率
	KeepRate *float32 `json:"keep_rate,omitempty"`

	// MarginCallAmount マージン計味金
	MarginCallAmount *float32 `json:"margin_call_amount,omitempty"`

	// MarginCallDueDate 計味金期限
	MarginCallDueDate *time.Time `json:"margin_call_due_date,omitempty"`

	// OpenPositionPnl ポジションプロフィット/ロス
	OpenPositionPnl *float32 `json:"open_position_pnl,omitempty"`

	// RequireCollateral 必要設定
	RequireCollateral *float32 `json:"require_collateral,omitempty"`
}

// CollateralAccount defines model for CollateralAccount.
type CollateralAccount struct {
	// Amount 額
	Amount *float32 `json:"amount,omitempty"`

	// CurrencyCode 通貨
	CurrencyCode *string `json:"currency_code,omitempty"`
}

// CollateralHistory defines model for CollateralHistory.
type CollateralHistory struct {
	// Amount 変動後残高
	Amount *float32 `json:"amount,omitempty"`

	// Change 変動額
	Change *float32 `json:"change,omitempty"`

	// CurrencyCode 通貨
	CurrencyCode *string `json:"currency_code,omitempty"`

	// Date 日時
	Date *time.Time `json:"date,omitempty"`

	// Id ID
	Id *int `json:"id,omitempty"`

	// ReasonCode 事由コード
	ReasonCode *string `json:"reason_code,omitempty"`
}

// CorporateLeverage defines model for CorporateLeverage.
type CorporateLeverage struct {
	// CurrentMax 現行最大レバレッジ
	CurrentMax *float32 `json:"current_max,omitempty"`

	// CurrentStartdate 現行適用開始日
	CurrentStartdate *time.Time `json:"current_startdate,omitempty"`

	// NextMax 次回適用予定の最大レバレッジ
	NextMax *float32 `json:"next_max,omitempty"`

	// NextStartdate 次回適用開始日
	NextStartdate *time.Time `json:"next_startdate,omitempty"`
}

// ExchangeHealth defines model for ExchangeHealth.
type ExchangeHealth struct {
	// Status 取得所状態
	Status *ExchangeHealthStatus `json:"status,omitempty"`
}

// ExchangeHealthStatus 取得所状態
type ExchangeHealthStatus string

// Execution defines model for Execution.
type Execution struct {
	// ChildOrderAcceptanceId API接受ID
	ChildOrderAcceptanceId *string `json:"child_order_acceptance_id,omitempty"`

	// ChildOrderId 子注文ID
	ChildOrderId *string `json:"child_order_id,omitempty"`

	// Commission 手数料
	Commission *float32 `json:"commission,omitempty"`

	// ExecDate 時間
	ExecDate *time.Time `json:"exec_date,omitempty"`

	// Id ID
	Id *int `json:"id,omitempty"`

	// Price 価格
	Price *float32 `json:"price,omitempty"`

	// Side "BUY"または"SELL"
	Side *string `json:"side,omitempty"`

	// Size 量
	Size *float32 `json:"size,omitempty"`
}

// FundingRate defines model for FundingRate.
type FundingRate struct {
	// CurrentFundingRate 現在の資金貯積率
	CurrentFundingRate *float32 `json:"current_funding_rate,omitempty"`

	// NextFundingRateSettledate 次回貯積完了日
	NextFundingRateSettledate *time.Time `json:"next_funding_rate_settledate,omitempty"`
}

// Market defines model for Market.
type Market struct {
	// MarketType "Spot" または "FX"
	MarketType *MarketMarketType `json:"market_type,omitempty"`

	// ProductCode プロダクトコード
	ProductCode *string `json:"product_code,omitempty"`
}

// MarketMarketType "Spot" または "FX"
type MarketMarketType string

// MarketExecution defines model for MarketExecution.
type MarketExecution struct {
	// BuyChildOrderAcceptanceId 買注文の接受ID
	BuyChildOrderAcceptanceId *string `json:"buy_child_order_acceptance_id,omitempty"`

	// ExecDate 時間
	ExecDate *time.Time `json:"exec_date,omitempty"`

	// Id ID
	Id *int `json:"id,omitempty"`

	// Price 価格
	Price *float32 `json:"price,omitempty"`

	// SellChildOrderAcceptanceId 売注文の接受ID
	SellChildOrderAcceptanceId *string `json:"sell_child_order_acceptance_id,omitempty"`

	// Side "BUY"または"SELL"
	Side *string `json:"side,omitempty"`

	// Size 量
	Size *float32 `json:"size,omitempty"`
}

// NewOrderRequest defines model for NewOrderRequest.
type NewOrderRequest struct {
	// ChildOrderType "LIMIT"または"MARKET"
	ChildOrderType NewOrderRequestChildOrderType `json:"child_order_type"`

	// MinuteToExpire 有効期限(分)。最大値43200。省略時は43200。
	MinuteToExpire *int `json:"minute_to_expire,omitempty"`

	// Price 価格 (オーダータイプが LIMIT の場合必須)
	Price *float32 `json:"price,omitempty"`

	// ProductCode プロダクトコード
	ProductCode string `json:"product_code"`

	// Side "BUY"または"SELL"
	Side NewOrderRequestSide `json:"side"`

	// Size 注文量
	Size float32 `json:"size"`

	// TimeInForce "GTC"、"IOC"、"FOK"のいずれか
	TimeInForce *NewOrderRequestTimeInForce `json:"time_in_force,omitempty"`
}

// NewOrderRequestChildOrderType "LIMIT"または"MARKET"
type NewOrderRequestChildOrderType string

// NewOrderRequestSide "BUY"または"SELL"
type NewOrderRequestSide string

// NewOrderRequestTimeInForce "GTC"、"IOC"、"FOK"のいずれか
type NewOrderRequestTimeInForce string

// NewParentOrderRequest defines model for NewParentOrderRequest.
type NewParentOrderRequest struct {
	// MinuteToExpire 有効期限(分)。最大値43200。省略時は43200。
	MinuteToExpire *int `json:"minute_to_expire,omitempty"`

	// OrderMethod 注文方法 (SIMPLE, IFD, OCO, IFDOCO)
	OrderMethod *NewParentOrderRequestOrderMethod `json:"order_method,omitempty"`

	// Parameters オーダー設定パラメータの配列
	Parameters []ParentOrderParameter `json:"parameters"`

	// TimeInForce "GTC"、"IOC"、"FOK"のいずれか
	TimeInForce *NewParentOrderRequestTimeInForce `json:"time_in_force,omitempty"`
}

// NewParentOrderRequestOrderMethod 注文方法 (SIMPLE, IFD, OCO, IFDOCO)
type NewParentOrderRequestOrderMethod string

// NewParentOrderRequestTimeInForce "GTC"、"IOC"、"FOK"のいずれか
type NewParentOrderRequestTimeInForce string

// ParentOrder defines model for ParentOrder.
type ParentOrder struct {
	// AveragePrice 平均価格
	AveragePrice *float32 `json:"average_price,omitempty"`

	// CancelSize キャンセル量
	CancelSize *float32 `json:"cancel_size,omitempty"`

	// ExecutedSize 実行済み量
	ExecutedSize *float32 `json:"executed_size,omitempty"`

	// ExpireDate 有効期限
	ExpireDate *time.Time `json:"expire_date,omitempty"`

	// Id ID
	Id *int `json:"id,omitempty"`

	// OutstandingSize 未繰購量
	OutstandingSize *float32 `json:"outstanding_size,omitempty"`

	// ParentOrderAcceptanceId API接受ID
	ParentOrderAcceptanceId *string `json:"parent_order_acceptance_id,omitempty"`

	// ParentOrderDate 注文日時
	ParentOrderDate *time.Time `json:"parent_order_date,omitempty"`

	// ParentOrderId 親注文ID
	ParentOrderId *string `json:"parent_order_id,omitempty"`

	// ParentOrderState 注文状態
	ParentOrderState *ParentOrderParentOrderState `json:"parent_order_state,omitempty"`

	// ParentOrderType 親注文方式/条件
	ParentOrderType *ParentOrderParentOrderType `json:"parent_order_type,omitempty"`

	// Price 参考価格
	Price *float32 `json:"price,omitempty"`

	// ProductCode プロダクトコード
	ProductCode *string `json:"product_code,omitempty"`

	// Side "BUY"または"SELL"
	Side *string `json:"side,omitempty"`

	// Size 量
	Size *float32 `json:"size,omitempty"`

	// TotalCommission 取得手数料
	TotalCommission *float32 `json:"total_commission,omitempty"`
}

// ParentOrderParentOrderState 注文状態
type ParentOrderParentOrderState string

// ParentOrderParentOrderType 親注文方式/条件
type ParentOrderParentOrderType string

// ParentOrderDetail defines model for ParentOrderDetail.
type ParentOrderDetail struct {
	// Id ID
	Id *int `json:"id,omitempty"`

	// MinuteToExpire 有効期限(分)
	MinuteToExpire *int `json:"minute_to_expire,omitempty"`

	// OrderMethod 注文方法
	OrderMethod *ParentOrderDetailOrderMethod `json:"order_method,omitempty"`
	Parameters  *[]ParentOrderParameter       `json:"parameters,omitempty"`

	// ParentOrderAcceptanceId API接受ID
	ParentOrderAcceptanceId *string `json:"parent_order_acceptance_id,omitempty"`

	// ParentOrderId 親注文ID
	ParentOrderId *string `json:"parent_order_id,omitempty"`
}

// ParentOrderDetailOrderMethod 注文方法
type ParentOrderDetailOrderMethod string

// ParentOrderParameter defines model for ParentOrderParameter.
type ParentOrderParameter struct {
	// ConditionType 処理条件
	ConditionType ParentOrderParameterConditionType `json:"condition_type"`

	// Offset トレーラー幅 (condition_typeが TRAIL の場合必須)
	Offset *int `json:"offset,omitempty"`

	// Price 価格 (condition_typeが LIMIT/STOP_LIMIT の場合必須)
	Price *float32 `json:"price,omitempty"`

	// ProductCode プロダクトコード
	ProductCode string `json:"product_code"`

	// Side "BUY"または"SELL"
	Side ParentOrderParameterSide `json:"side"`

	// Size 量
	Size float32 `json:"size"`

	// TriggerPrice トリガー価格 (condition_typeが STOP/STOP_LIMIT の場合必須)
	TriggerPrice *float32 `json:"trigger_price,omitempty"`
}

// ParentOrderParameterConditionType 処理条件
type ParentOrderParameterConditionType string

// ParentOrderParameterSide "BUY"または"SELL"
type ParentOrderParameterSide string

// ParentOrderResult defines model for ParentOrderResult.
type ParentOrderResult struct {
	// ParentOrderAcceptanceId 新規親注文の接受ID
	ParentOrderAcceptanceId *string `json:"parent_order_acceptance_id,omitempty"`
}

// Position defines model for Position.
type Position struct {
	// Commission 手数料
	Commission *float32 `json:"commission,omitempty"`

	// Leverage レバレッジ率
	Leverage *float32 `json:"leverage,omitempty"`

	// OpenDate 作成日
	OpenDate *time.Time `json:"open_date,omitempty"`

	// Pnl プロフィット測定
	Pnl *float32 `json:"pnl,omitempty"`

	// Price 平均参考価格
	Price *float32 `json:"price,omitempty"`

	// ProductCode プロダクトコード
	ProductCode *string `json:"product_code,omitempty"`

	// RequireCollateral 必要設定
	RequireCollateral *float32 `json:"require_collateral,omitempty"`

	// Sfd SFD
	Sfd *float32 `json:"sfd,omitempty"`

	// Side "BUY"または"SELL"
	Side *string `json:"side,omitempty"`

	// Size 量
	Size *float32 `json:"size,omitempty"`

	// SwapPointAccumulate スワップ点
	SwapPointAccumulate *float32 `json:"swap_point_accumulate,omitempty"`
}

// Ticker defines model for Ticker.
type Ticker struct {
	// BestAsk 最低価格売り価
	BestAsk *float32 `json:"best_ask,omitempty"`

	// BestAskSize 最低価格売り価における量
	BestAskSize *float32 `json:"best_ask_size,omitempty"`

	// BestBid 最高価格買い価
	BestBid *float32 `json:"best_bid,omitempty"`

	// BestBidSize 最高価格買い価における量
	BestBidSize *float32 `json:"best_bid_size,omitempty"`

	// Ltp 最終参考価格 (LTP)
	Ltp *float32 `json:"ltp,omitempty"`

	// MarketAskSize 市場成り行の売注文量 (板合わせ時)
	MarketAskSize *float32 `json:"market_ask_size,omitempty"`

	// MarketBidSize 市場成り行の買注文量 (板合わせ時)
	MarketBidSize *float32 `json:"market_bid_size,omitempty"`

	// ProductCode プロダクトコード
	ProductCode *string `json:"product_code,omitempty"`

	// State ボード状態 (RUNNING、CLOSED等)
	State *string `json:"state,omitempty"`

	// TickId ティックID
	TickId *int `json:"tick_id,omitempty"`

	// Timestamp UTC時間
	Timestamp *time.Time `json:"timestamp,omitempty"`

	// TotalAskDepth 全売り決済量
	TotalAskDepth *float32 `json:"total_ask_depth,omitempty"`

	// TotalBidDepth 全買い決済量
	TotalBidDepth *float32 `json:"total_bid_depth,omitempty"`

	// Volume 24時間の収容上量
	Volume *float32 `json:"volume,omitempty"`

	// VolumeByProduct 24時間の収容上量 (対象プロダクト)
	VolumeByProduct *float32 `json:"volume_by_product,omitempty"`
}

// TradingCommission defines model for TradingCommission.
type TradingCommission struct {
	// CommissionRate 手数料率
	CommissionRate *float32 `json:"commission_rate,omitempty"`
}

// WithdrawRequest defines model for WithdrawRequest.
type WithdrawRequest struct {
	// Amount 金額
	Amount float32 `json:"amount"`

	// BankAccountId 銀行口座ID
	BankAccountId int `json:"bank_account_id"`

	// Code 認証コード (2FA)
	Code *string `json:"code,omitempty"`

	// CurrencyCode 通貨 (JPY のみ)
	CurrencyCode string `json:"currency_code"`
}

// WithdrawResponse defines model for WithdrawResponse.
type WithdrawResponse struct {
	// MessageId 受付ID (message_id)
	MessageId *string `json:"message_id,omitempty"`
}

// Withdrawal defines model for Withdrawal.
type Withdrawal struct {
	// Amount 額
	Amount *float32 `json:"amount,omitempty"`

	// CurrencyCode 通貨
	CurrencyCode *string `json:"currency_code,omitempty"`

	// EventDate 日時
	EventDate *time.Time `json:"event_date,omitempty"`

	// Id ID
	Id *int `json:"id,omitempty"`

	// OrderId order_id
	OrderId *string `json:"order_id,omitempty"`

	// Status "PENDING"または"COMPLETED"
	Status *string `json:"status,omitempty"`
}

// After defines model for after.
type After = int

// Before defines model for before.
type Before = int

// ChildOrderAcceptanceId defines model for child_order_acceptance_id.
type ChildOrderAcceptanceId = string

// ChildOrderId defines model for child_order_id.
type ChildOrderId = string

// ChildOrderState defines model for child_order_state.
type ChildOrderState string

// Count defines model for count.
type Count = int

// CurrencyCode defines model for currency_code.
type CurrencyCode = string

// FromDate defines model for from_date.
type FromDate = time.Time

// MessageId defines model for message_id.
type MessageId = string

// ParentOrderAcceptanceId defines model for parent_order_acceptance_id.
type ParentOrderAcceptanceId = string

// ParentOrderId defines model for parent_order_id.
type ParentOrderId = string

// ParentOrderState defines model for parent_order_state.
type ParentOrderState string

// ProductCode defines model for product_code.
type ProductCode = string

// GetV1BoardParams defines parameters for GetV1Board.
type GetV1BoardParams struct {
	// ProductCode 銭幣のプロダクトコード。市場一覧APIで取得できる値を指定します。
	ProductCode ProductCode `form:"product_code" json:"product_code"`
}

// GetV1ExecutionsParams defines parameters for GetV1Executions.
type GetV1ExecutionsParams struct {
	// ProductCode 銭幣のプロダクトコード。市場一覧APIで取得できる値を指定します。
	ProductCode ProductCode `form:"product_code" json:"product_code"`

	// Count 取得するレコード数。省略した場合は100となります。
	Count *Count `form:"count,omitempty" json:"count,omitempty"`

	// Before IDが指定した値より小さいレコードを取得
	Before *Before `form:"before,omitempty" json:"before,omitempty"`

	// After IDが指定した値より大きいレコードを取得
	After *After `form:"after,omitempty" json:"after,omitempty"`
}

// GetV1GetboardParams defines parameters for GetV1Getboard.
type GetV1GetboardParams struct {
	// ProductCode 銭幣のプロダクトコード。市場一覧APIで取得できる値を指定します。
	ProductCode ProductCode `form:"product_code" json:"product_code"`
}

// GetV1GetboardstateParams defines parameters for GetV1Getboardstate.
type GetV1GetboardstateParams struct {
	// ProductCode 銭幣のプロダクトコード。市場一覧APIで取得できる値を指定します。
	ProductCode ProductCode `form:"product_code" json:"product_code"`
}

// GetV1GetchatsParams defines parameters for GetV1Getchats.
type GetV1GetchatsParams struct {
	// FromDate この日以降のメッセージを取得します。指定なしの場合は直近の5日分のログを返します。
	FromDate *FromDate `form:"from_date,omitempty" json:"from_date,omitempty"`
}

// GetV1GetchatsEuParams defines parameters for GetV1GetchatsEu.
type GetV1GetchatsEuParams struct {
	// FromDate この日以降のメッセージを取得します。指定なしの場合は直近の5日分のログを返します。
	FromDate *FromDate `form:"from_date,omitempty" json:"from_date,omitempty"`
}

// GetV1GetchatsUsaParams defines parameters for GetV1GetchatsUsa.
type GetV1GetchatsUsaParams struct {
	// FromDate この日以降のメッセージを取得します。指定なしの場合は直近の5日分のログを返します。
	FromDate *FromDate `form:"from_date,omitempty" json:"from_date,omitempty"`
}

// GetV1GetexecutionsParams defines parameters for GetV1Getexecutions.
type GetV1GetexecutionsParams struct {
	// ProductCode 銭幣のプロダクトコード。市場一覧APIで取得できる値を指定します。
	ProductCode ProductCode `form:"product_code" json:"product_code"`

	// Count 取得するレコード数。省略した場合は100となります。
	Count *Count `form:"count,omitempty" json:"count,omitempty"`

	// Before IDが指定した値より小さいレコードを取得
	Before *Before `form:"before,omitempty" json:"before,omitempty"`

	// After IDが指定した値より大きいレコードを取得
	After *After `form:"after,omitempty" json:"after,omitempty"`
}

// GetV1GetfundingrateParams defines parameters for GetV1Getfundingrate.
type GetV1GetfundingrateParams struct {
	// ProductCode 銭幣のプロダクトコード。市場一覧APIで取得できる値を指定します。
	ProductCode ProductCode `form:"product_code" json:"product_code"`
}

// GetV1GethealthParams defines parameters for GetV1Gethealth.
type GetV1GethealthParams struct {
	// ProductCode 銭幣のプロダクトコード。市場一覧APIで取得できる値を指定します。
	ProductCode ProductCode `form:"product_code" json:"product_code"`
}

// GetV1GettickerParams defines parameters for GetV1Getticker.
type GetV1GettickerParams struct {
	// ProductCode 銭幣のプロダクトコード。市場一覧APIで取得できる値を指定します。
	ProductCode ProductCode `form:"product_code" json:"product_code"`
}

// GetV1MeGetbalancehistoryParams defines parameters for GetV1MeGetbalancehistory.
type GetV1MeGetbalancehistoryParams struct {
	// CurrencyCode 通貨コード。省略した場合は JPY となります。
	CurrencyCode *CurrencyCode `form:"currency_code,omitempty" json:"currency_code,omitempty"`

	// Count 取得するレコード数。省略した場合は100となります。
	Count *Count `form:"count,omitempty" json:"count,omitempty"`

	// Before IDが指定した値より小さいレコードを取得
	Before *Before `form:"before,omitempty" json:"before,omitempty"`

	// After IDが指定した値より大きいレコードを取得
	After *After `form:"after,omitempty" json:"after,omitempty"`
}

// GetV1MeGetchildordersParams defines parameters for GetV1MeGetchildorders.
type GetV1MeGetchildordersParams struct {
	// ProductCode 銭幣のプロダクトコード。市場一覧APIで取得できる値を指定します。
	ProductCode ProductCode `form:"product_code" json:"product_code"`

	// Count 取得するレコード数。省略した場合は100となります。
	Count *Count `form:"count,omitempty" json:"count,omitempty"`

	// Before IDが指定した値より小さいレコードを取得
	Before *Before `form:"before,omitempty" json:"before,omitempty"`

	// After IDが指定した値より大きいレコードを取得
	After *After `form:"after,omitempty" json:"after,omitempty"`

	// ChildOrderState 押さえる場合、指定した状態のみを返します。ACTIVE (OPEN 中の注文)、COMPLETED (全量稼働済み)等が指定可能。
	ChildOrderState *GetV1MeGetchildordersParamsChildOrderState `form:"child_order_state,omitempty" json:"child_order_state,omitempty"`

	// ChildOrderId 子注文のID。
	ChildOrderId *ChildOrderId `form:"child_order_id,omitempty" json:"child_order_id,omitempty"`

	// ChildOrderAcceptanceId API登録ID (新規注文APIの帰り値) 。
	ChildOrderAcceptanceId *ChildOrderAcceptanceId `form:"child_order_acceptance_id,omitempty" json:"child_order_acceptance_id,omitempty"`

	// ParentOrderId 親注文のID。
	ParentOrderId *ParentOrderId `form:"parent_order_id,omitempty" json:"parent_order_id,omitempty"`
}

// GetV1MeGetchildordersParamsChildOrderState defines parameters for GetV1MeGetchildorders.
type GetV1MeGetchildordersParamsChildOrderState string

// GetV1MeGetcoininsParams defines parameters for GetV1MeGetcoinins.
type GetV1MeGetcoininsParams struct {
	// Count 取得するレコード数。省略した場合は100となります。
	Count *Count `form:"count,omitempty" json:"count,omitempty"`

	// Before IDが指定した値より小さいレコードを取得
	Before *Before `form:"before,omitempty" json:"before,omitempty"`

	// After IDが指定した値より大きいレコードを取得
	After *After `form:"after,omitempty" json:"after,omitempty"`
}

// GetV1MeGetcoinoutsParams defines parameters for GetV1MeGetcoinouts.
type GetV1MeGetcoinoutsParams struct {
	// Count 取得するレコード数。省略した場合は100となります。
	Count *Count `form:"count,omitempty" json:"count,omitempty"`

	// Before IDが指定した値より小さいレコードを取得
	Before *Before `form:"before,omitempty" json:"before,omitempty"`

	// After IDが指定した値より大きいレコードを取得
	After *After `form:"after,omitempty" json:"after,omitempty"`
}

// GetV1MeGetcollateralhistoryParams defines parameters for GetV1MeGetcollateralhistory.
type GetV1MeGetcollateralhistoryParams struct {
	// Count 取得するレコード数。省略した場合は100となります。
	Count *Count `form:"count,omitempty" json:"count,omitempty"`

	// Before IDが指定した値より小さいレコードを取得
	Before *Before `form:"before,omitempty" json:"before,omitempty"`

	// After IDが指定した値より大きいレコードを取得
	After *After `form:"after,omitempty" json:"after,omitempty"`
}

// GetV1MeGetdepositsParams defines parameters for GetV1MeGetdeposits.
type GetV1MeGetdepositsParams struct {
	// Count 取得するレコード数。省略した場合は100となります。
	Count *Count `form:"count,omitempty" json:"count,omitempty"`

	// Before IDが指定した値より小さいレコードを取得
	Before *Before `form:"before,omitempty" json:"before,omitempty"`

	// After IDが指定した値より大きいレコードを取得
	After *After `form:"after,omitempty" json:"after,omitempty"`
}

// GetV1MeGetexecutionsParams defines parameters for GetV1MeGetexecutions.
type GetV1MeGetexecutionsParams struct {
	// ProductCode 銭幣のプロダクトコード。市場一覧APIで取得できる値を指定します。
	ProductCode ProductCode `form:"product_code" json:"product_code"`

	// Count 取得するレコード数。省略した場合は100となります。
	Count *Count `form:"count,omitempty" json:"count,omitempty"`

	// Before IDが指定した値より小さいレコードを取得
	Before *Before `form:"before,omitempty" json:"before,omitempty"`

	// After IDが指定した値より大きいレコードを取得
	After *After `form:"after,omitempty" json:"after,omitempty"`

	// ChildOrderId 子注文のID。
	ChildOrderId *ChildOrderId `form:"child_order_id,omitempty" json:"child_order_id,omitempty"`

	// ChildOrderAcceptanceId API登録ID (新規注文APIの帰り値) 。
	ChildOrderAcceptanceId *ChildOrderAcceptanceId `form:"child_order_acceptance_id,omitempty" json:"child_order_acceptance_id,omitempty"`
}

// GetV1MeGetparentorderParams defines parameters for GetV1MeGetparentorder.
type GetV1MeGetparentorderParams struct {
	// ParentOrderId 親注文のID。
	ParentOrderId *ParentOrderId `form:"parent_order_id,omitempty" json:"parent_order_id,omitempty"`

	// ParentOrderAcceptanceId API登録ID (親注文APIの帰り値)。
	ParentOrderAcceptanceId *ParentOrderAcceptanceId `form:"parent_order_acceptance_id,omitempty" json:"parent_order_acceptance_id,omitempty"`
}

// GetV1MeGetparentordersParams defines parameters for GetV1MeGetparentorders.
type GetV1MeGetparentordersParams struct {
	// ProductCode 銭幣のプロダクトコード。市場一覧APIで取得できる値を指定します。
	ProductCode ProductCode `form:"product_code" json:"product_code"`

	// Count 取得するレコード数。省略した場合は100となります。
	Count *Count `form:"count,omitempty" json:"count,omitempty"`

	// Before IDが指定した値より小さいレコードを取得
	Before *Before `form:"before,omitempty" json:"before,omitempty"`

	// After IDが指定した値より大きいレコードを取得
	After *After `form:"after,omitempty" json:"after,omitempty"`

	// ParentOrderState 指定した状態のみを返します。ACTIVE、COMPLETED、CANCELED、EXPIRED、REJECTED が指定可能。
	ParentOrderState *GetV1MeGetparentordersParamsParentOrderState `form:"parent_order_state,omitempty" json:"parent_order_state,omitempty"`
}

// GetV1MeGetparentordersParamsParentOrderState defines parameters for GetV1MeGetparentorders.
type GetV1MeGetparentordersParamsParentOrderState string

// GetV1MeGetpositionsParams defines parameters for GetV1MeGetpositions.
type GetV1MeGetpositionsParams struct {
	// ProductCode 銭幣のプロダクトコード。市場一覧APIで取得できる値を指定します。
	ProductCode ProductCode `form:"product_code" json:"product_code"`
}

// GetV1MeGettradingcommissionParams defines parameters for GetV1MeGettradingcommission.
type GetV1MeGettradingcommissionParams struct {
	// ProductCode 銭幣のプロダクトコード。市場一覧APIで取得できる値を指定します。
	ProductCode ProductCode `form:"product_code" json:"product_code"`
}

// GetV1MeGetwithdrawalsParams defines parameters for GetV1MeGetwithdrawals.
type GetV1MeGetwithdrawalsParams struct {
	// Count 取得するレコード数。省略した場合は100となります。
	Count *Count `form:"count,omitempty" json:"count,omitempty"`

	// Before IDが指定した値より小さいレコードを取得
	Before *Before `form:"before,omitempty" json:"before,omitempty"`

	// After IDが指定した値より大きいレコードを取得
	After *After `form:"after,omitempty" json:"after,omitempty"`

	// MessageId 出金APIの帰り値 (message_id)を指定した場合、対応する出金の状態を取得します。
	MessageId *MessageId `form:"message_id,omitempty" json:"message_id,omitempty"`
}

// GetV1TickerParams defines parameters for GetV1Ticker.
type GetV1TickerParams struct {
	// ProductCode 銭幣のプロダクトコード。市場一覧APIで取得できる値を指定します。
	ProductCode ProductCode `form:"product_code" json:"product_code"`
}

// PostV1MeCancelallchildordersJSONRequestBody defines body for PostV1MeCancelallchildorders for application/json ContentType.
type PostV1MeCancelallchildordersJSONRequestBody = CancelAllOrdersRequest

// PostV1MeCancelchildorderJSONRequestBody defines body for PostV1MeCancelchildorder for application/json ContentType.
type PostV1MeCancelchildorderJSONRequestBody = CancelChildOrderRequest

// PostV1MeCancelparentorderJSONRequestBody defines body for PostV1MeCancelparentorder for application/json ContentType.
type PostV1MeCancelparentorderJSONRequestBody = CancelParentOrderRequest

// PostV1MeSendchildorderJSONRequestBody defines body for PostV1MeSendchildorder for application/json ContentType.
type PostV1MeSendchildorderJSONRequestBody = NewOrderRequest

// PostV1MeSendparentorderJSONRequestBody defines body for PostV1MeSendparentorder for application/json ContentType.
type PostV1MeSendparentorderJSONRequestBody = NewParentOrderRequest

// PostV1MeWithdrawJSONRequestBody defines body for PostV1MeWithdraw for application/json ContentType.
type PostV1MeWithdrawJSONRequestBody = WithdrawRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetV1Board request
	GetV1Board(ctx context.Context, params *GetV1BoardParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1Executions request
	GetV1Executions(ctx context.Context, params *GetV1ExecutionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1Getboard request
	GetV1Getboard(ctx context.Context, params *GetV1GetboardParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1Getboardstate request
	GetV1Getboardstate(ctx context.Context, params *GetV1GetboardstateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1Getchats request
	GetV1Getchats(ctx context.Context, params *GetV1GetchatsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1GetchatsEu request
	GetV1GetchatsEu(ctx context.Context, params *GetV1GetchatsEuParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1GetchatsUsa request
	GetV1GetchatsUsa(ctx context.Context, params *GetV1GetchatsUsaParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1Getcorporateleverage request
	GetV1Getcorporateleverage(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1Getexecutions request
	GetV1Getexecutions(ctx context.Context, params *GetV1GetexecutionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1Getfundingrate request
	GetV1Getfundingrate(ctx context.Context, params *GetV1GetfundingrateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1Gethealth request
	GetV1Gethealth(ctx context.Context, params *GetV1GethealthParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1Getmarkets request
	GetV1Getmarkets(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1GetmarketsEu request
	GetV1GetmarketsEu(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1GetmarketsUsa request
	GetV1GetmarketsUsa(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1Getticker request
	GetV1Getticker(ctx context.Context, params *GetV1GettickerParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1Markets request
	GetV1Markets(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1MarketsEu request
	GetV1MarketsEu(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1MarketsUsa request
	GetV1MarketsUsa(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1MeCancelallchildordersWithBody request with any body
	PostV1MeCancelallchildordersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1MeCancelallchildorders(ctx context.Context, body PostV1MeCancelallchildordersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1MeCancelchildorderWithBody request with any body
	PostV1MeCancelchildorderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1MeCancelchildorder(ctx context.Context, body PostV1MeCancelchildorderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1MeCancelparentorderWithBody request with any body
	PostV1MeCancelparentorderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1MeCancelparentorder(ctx context.Context, body PostV1MeCancelparentorderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1MeGetaddresses request
	GetV1MeGetaddresses(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1MeGetbalance request
	GetV1MeGetbalance(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1MeGetbalancehistory request
	GetV1MeGetbalancehistory(ctx context.Context, params *GetV1MeGetbalancehistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1MeGetbankaccounts request
	GetV1MeGetbankaccounts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1MeGetchildorders request
	GetV1MeGetchildorders(ctx context.Context, params *GetV1MeGetchildordersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1MeGetcoinins request
	GetV1MeGetcoinins(ctx context.Context, params *GetV1MeGetcoininsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1MeGetcoinouts request
	GetV1MeGetcoinouts(ctx context.Context, params *GetV1MeGetcoinoutsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1MeGetcollateral request
	GetV1MeGetcollateral(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1MeGetcollateralaccounts request
	GetV1MeGetcollateralaccounts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1MeGetcollateralhistory request
	GetV1MeGetcollateralhistory(ctx context.Context, params *GetV1MeGetcollateralhistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1MeGetdeposits request
	GetV1MeGetdeposits(ctx context.Context, params *GetV1MeGetdepositsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1MeGetexecutions request
	GetV1MeGetexecutions(ctx context.Context, params *GetV1MeGetexecutionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1MeGetparentorder request
	GetV1MeGetparentorder(ctx context.Context, params *GetV1MeGetparentorderParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1MeGetparentorders request
	GetV1MeGetparentorders(ctx context.Context, params *GetV1MeGetparentordersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1MeGetpermissions request
	GetV1MeGetpermissions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1MeGetpositions request
	GetV1MeGetpositions(ctx context.Context, params *GetV1MeGetpositionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1MeGettradingcommission request
	GetV1MeGettradingcommission(ctx context.Context, params *GetV1MeGettradingcommissionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1MeGetwithdrawals request
	GetV1MeGetwithdrawals(ctx context.Context, params *GetV1MeGetwithdrawalsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1MeSendchildorderWithBody request with any body
	PostV1MeSendchildorderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1MeSendchildorder(ctx context.Context, body PostV1MeSendchildorderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1MeSendparentorderWithBody request with any body
	PostV1MeSendparentorderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1MeSendparentorder(ctx context.Context, body PostV1MeSendparentorderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1MeWithdrawWithBody request with any body
	PostV1MeWithdrawWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1MeWithdraw(ctx context.Context, body PostV1MeWithdrawJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1Ticker request
	GetV1Ticker(ctx context.Context, params *GetV1TickerParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetV1Board(ctx context.Context, params *GetV1BoardParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1BoardRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1Executions(ctx context.Context, params *GetV1ExecutionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ExecutionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1Getboard(ctx context.Context, params *GetV1GetboardParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1GetboardRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1Getboardstate(ctx context.Context, params *GetV1GetboardstateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1GetboardstateRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1Getchats(ctx context.Context, params *GetV1GetchatsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1GetchatsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1GetchatsEu(ctx context.Context, params *GetV1GetchatsEuParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1GetchatsEuRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1GetchatsUsa(ctx context.Context, params *GetV1GetchatsUsaParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1GetchatsUsaRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1Getcorporateleverage(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1GetcorporateleverageRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1Getexecutions(ctx context.Context, params *GetV1GetexecutionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1GetexecutionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1Getfundingrate(ctx context.Context, params *GetV1GetfundingrateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1GetfundingrateRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1Gethealth(ctx context.Context, params *GetV1GethealthParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1GethealthRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1Getmarkets(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1GetmarketsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1GetmarketsEu(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1GetmarketsEuRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1GetmarketsUsa(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1GetmarketsUsaRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1Getticker(ctx context.Context, params *GetV1GettickerParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1GettickerRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1Markets(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1MarketsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1MarketsEu(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1MarketsEuRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1MarketsUsa(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1MarketsUsaRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1MeCancelallchildordersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1MeCancelallchildordersRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1MeCancelallchildorders(ctx context.Context, body PostV1MeCancelallchildordersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1MeCancelallchildordersRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1MeCancelchildorderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1MeCancelchildorderRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1MeCancelchildorder(ctx context.Context, body PostV1MeCancelchildorderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1MeCancelchildorderRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1MeCancelparentorderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1MeCancelparentorderRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1MeCancelparentorder(ctx context.Context, body PostV1MeCancelparentorderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1MeCancelparentorderRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1MeGetaddresses(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1MeGetaddressesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1MeGetbalance(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1MeGetbalanceRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1MeGetbalancehistory(ctx context.Context, params *GetV1MeGetbalancehistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1MeGetbalancehistoryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1MeGetbankaccounts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1MeGetbankaccountsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1MeGetchildorders(ctx context.Context, params *GetV1MeGetchildordersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1MeGetchildordersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1MeGetcoinins(ctx context.Context, params *GetV1MeGetcoininsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1MeGetcoininsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1MeGetcoinouts(ctx context.Context, params *GetV1MeGetcoinoutsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1MeGetcoinoutsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1MeGetcollateral(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1MeGetcollateralRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1MeGetcollateralaccounts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1MeGetcollateralaccountsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1MeGetcollateralhistory(ctx context.Context, params *GetV1MeGetcollateralhistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1MeGetcollateralhistoryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1MeGetdeposits(ctx context.Context, params *GetV1MeGetdepositsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1MeGetdepositsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1MeGetexecutions(ctx context.Context, params *GetV1MeGetexecutionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1MeGetexecutionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1MeGetparentorder(ctx context.Context, params *GetV1MeGetparentorderParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1MeGetparentorderRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1MeGetparentorders(ctx context.Context, params *GetV1MeGetparentordersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1MeGetparentordersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1MeGetpermissions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1MeGetpermissionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1MeGetpositions(ctx context.Context, params *GetV1MeGetpositionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1MeGetpositionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1MeGettradingcommission(ctx context.Context, params *GetV1MeGettradingcommissionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1MeGettradingcommissionRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1MeGetwithdrawals(ctx context.Context, params *GetV1MeGetwithdrawalsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1MeGetwithdrawalsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1MeSendchildorderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1MeSendchildorderRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1MeSendchildorder(ctx context.Context, body PostV1MeSendchildorderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1MeSendchildorderRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1MeSendparentorderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1MeSendparentorderRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1MeSendparentorder(ctx context.Context, body PostV1MeSendparentorderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1MeSendparentorderRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1MeWithdrawWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1MeWithdrawRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1MeWithdraw(ctx context.Context, body PostV1MeWithdrawJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1MeWithdrawRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1Ticker(ctx context.Context, params *GetV1TickerParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1TickerRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetV1BoardRequest generates requests for GetV1Board
func NewGetV1BoardRequest(server string, params *GetV1BoardParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/board")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "product_code", runtime.ParamLocationQuery, params.ProductCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1ExecutionsRequest generates requests for GetV1Executions
func NewGetV1ExecutionsRequest(server string, params *GetV1ExecutionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/executions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "product_code", runtime.ParamLocationQuery, params.ProductCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Before != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.After != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1GetboardRequest generates requests for GetV1Getboard
func NewGetV1GetboardRequest(server string, params *GetV1GetboardParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/getboard")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "product_code", runtime.ParamLocationQuery, params.ProductCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1GetboardstateRequest generates requests for GetV1Getboardstate
func NewGetV1GetboardstateRequest(server string, params *GetV1GetboardstateParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/getboardstate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "product_code", runtime.ParamLocationQuery, params.ProductCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1GetchatsRequest generates requests for GetV1Getchats
func NewGetV1GetchatsRequest(server string, params *GetV1GetchatsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/getchats")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FromDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from_date", runtime.ParamLocationQuery, *params.FromDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1GetchatsEuRequest generates requests for GetV1GetchatsEu
func NewGetV1GetchatsEuRequest(server string, params *GetV1GetchatsEuParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/getchats/eu")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FromDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from_date", runtime.ParamLocationQuery, *params.FromDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1GetchatsUsaRequest generates requests for GetV1GetchatsUsa
func NewGetV1GetchatsUsaRequest(server string, params *GetV1GetchatsUsaParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/getchats/usa")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FromDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from_date", runtime.ParamLocationQuery, *params.FromDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1GetcorporateleverageRequest generates requests for GetV1Getcorporateleverage
func NewGetV1GetcorporateleverageRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/getcorporateleverage")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1GetexecutionsRequest generates requests for GetV1Getexecutions
func NewGetV1GetexecutionsRequest(server string, params *GetV1GetexecutionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/getexecutions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "product_code", runtime.ParamLocationQuery, params.ProductCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Before != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.After != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1GetfundingrateRequest generates requests for GetV1Getfundingrate
func NewGetV1GetfundingrateRequest(server string, params *GetV1GetfundingrateParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/getfundingrate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "product_code", runtime.ParamLocationQuery, params.ProductCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1GethealthRequest generates requests for GetV1Gethealth
func NewGetV1GethealthRequest(server string, params *GetV1GethealthParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/gethealth")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "product_code", runtime.ParamLocationQuery, params.ProductCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1GetmarketsRequest generates requests for GetV1Getmarkets
func NewGetV1GetmarketsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/getmarkets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1GetmarketsEuRequest generates requests for GetV1GetmarketsEu
func NewGetV1GetmarketsEuRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/getmarkets/eu")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1GetmarketsUsaRequest generates requests for GetV1GetmarketsUsa
func NewGetV1GetmarketsUsaRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/getmarkets/usa")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1GettickerRequest generates requests for GetV1Getticker
func NewGetV1GettickerRequest(server string, params *GetV1GettickerParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/getticker")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "product_code", runtime.ParamLocationQuery, params.ProductCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1MarketsRequest generates requests for GetV1Markets
func NewGetV1MarketsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/markets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1MarketsEuRequest generates requests for GetV1MarketsEu
func NewGetV1MarketsEuRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/markets/eu")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1MarketsUsaRequest generates requests for GetV1MarketsUsa
func NewGetV1MarketsUsaRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/markets/usa")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1MeCancelallchildordersRequest calls the generic PostV1MeCancelallchildorders builder with application/json body
func NewPostV1MeCancelallchildordersRequest(server string, body PostV1MeCancelallchildordersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1MeCancelallchildordersRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1MeCancelallchildordersRequestWithBody generates requests for PostV1MeCancelallchildorders with any type of body
func NewPostV1MeCancelallchildordersRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/me/cancelallchildorders")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV1MeCancelchildorderRequest calls the generic PostV1MeCancelchildorder builder with application/json body
func NewPostV1MeCancelchildorderRequest(server string, body PostV1MeCancelchildorderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1MeCancelchildorderRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1MeCancelchildorderRequestWithBody generates requests for PostV1MeCancelchildorder with any type of body
func NewPostV1MeCancelchildorderRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/me/cancelchildorder")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV1MeCancelparentorderRequest calls the generic PostV1MeCancelparentorder builder with application/json body
func NewPostV1MeCancelparentorderRequest(server string, body PostV1MeCancelparentorderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1MeCancelparentorderRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1MeCancelparentorderRequestWithBody generates requests for PostV1MeCancelparentorder with any type of body
func NewPostV1MeCancelparentorderRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/me/cancelparentorder")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1MeGetaddressesRequest generates requests for GetV1MeGetaddresses
func NewGetV1MeGetaddressesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/me/getaddresses")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1MeGetbalanceRequest generates requests for GetV1MeGetbalance
func NewGetV1MeGetbalanceRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/me/getbalance")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1MeGetbalancehistoryRequest generates requests for GetV1MeGetbalancehistory
func NewGetV1MeGetbalancehistoryRequest(server string, params *GetV1MeGetbalancehistoryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/me/getbalancehistory")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CurrencyCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "currency_code", runtime.ParamLocationQuery, *params.CurrencyCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Before != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.After != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1MeGetbankaccountsRequest generates requests for GetV1MeGetbankaccounts
func NewGetV1MeGetbankaccountsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/me/getbankaccounts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1MeGetchildordersRequest generates requests for GetV1MeGetchildorders
func NewGetV1MeGetchildordersRequest(server string, params *GetV1MeGetchildordersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/me/getchildorders")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "product_code", runtime.ParamLocationQuery, params.ProductCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Before != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.After != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ChildOrderState != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "child_order_state", runtime.ParamLocationQuery, *params.ChildOrderState); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ChildOrderId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "child_order_id", runtime.ParamLocationQuery, *params.ChildOrderId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ChildOrderAcceptanceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "child_order_acceptance_id", runtime.ParamLocationQuery, *params.ChildOrderAcceptanceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentOrderId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_order_id", runtime.ParamLocationQuery, *params.ParentOrderId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1MeGetcoininsRequest generates requests for GetV1MeGetcoinins
func NewGetV1MeGetcoininsRequest(server string, params *GetV1MeGetcoininsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/me/getcoinins")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Before != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.After != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1MeGetcoinoutsRequest generates requests for GetV1MeGetcoinouts
func NewGetV1MeGetcoinoutsRequest(server string, params *GetV1MeGetcoinoutsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/me/getcoinouts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Before != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.After != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1MeGetcollateralRequest generates requests for GetV1MeGetcollateral
func NewGetV1MeGetcollateralRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/me/getcollateral")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1MeGetcollateralaccountsRequest generates requests for GetV1MeGetcollateralaccounts
func NewGetV1MeGetcollateralaccountsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/me/getcollateralaccounts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1MeGetcollateralhistoryRequest generates requests for GetV1MeGetcollateralhistory
func NewGetV1MeGetcollateralhistoryRequest(server string, params *GetV1MeGetcollateralhistoryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/me/getcollateralhistory")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Before != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.After != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1MeGetdepositsRequest generates requests for GetV1MeGetdeposits
func NewGetV1MeGetdepositsRequest(server string, params *GetV1MeGetdepositsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/me/getdeposits")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Before != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.After != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1MeGetexecutionsRequest generates requests for GetV1MeGetexecutions
func NewGetV1MeGetexecutionsRequest(server string, params *GetV1MeGetexecutionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/me/getexecutions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "product_code", runtime.ParamLocationQuery, params.ProductCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Before != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.After != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ChildOrderId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "child_order_id", runtime.ParamLocationQuery, *params.ChildOrderId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ChildOrderAcceptanceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "child_order_acceptance_id", runtime.ParamLocationQuery, *params.ChildOrderAcceptanceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1MeGetparentorderRequest generates requests for GetV1MeGetparentorder
func NewGetV1MeGetparentorderRequest(server string, params *GetV1MeGetparentorderParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/me/getparentorder")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ParentOrderId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_order_id", runtime.ParamLocationQuery, *params.ParentOrderId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentOrderAcceptanceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_order_acceptance_id", runtime.ParamLocationQuery, *params.ParentOrderAcceptanceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1MeGetparentordersRequest generates requests for GetV1MeGetparentorders
func NewGetV1MeGetparentordersRequest(server string, params *GetV1MeGetparentordersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/me/getparentorders")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "product_code", runtime.ParamLocationQuery, params.ProductCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Before != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.After != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentOrderState != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_order_state", runtime.ParamLocationQuery, *params.ParentOrderState); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1MeGetpermissionsRequest generates requests for GetV1MeGetpermissions
func NewGetV1MeGetpermissionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/me/getpermissions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1MeGetpositionsRequest generates requests for GetV1MeGetpositions
func NewGetV1MeGetpositionsRequest(server string, params *GetV1MeGetpositionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/me/getpositions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "product_code", runtime.ParamLocationQuery, params.ProductCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1MeGettradingcommissionRequest generates requests for GetV1MeGettradingcommission
func NewGetV1MeGettradingcommissionRequest(server string, params *GetV1MeGettradingcommissionParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/me/gettradingcommission")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "product_code", runtime.ParamLocationQuery, params.ProductCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1MeGetwithdrawalsRequest generates requests for GetV1MeGetwithdrawals
func NewGetV1MeGetwithdrawalsRequest(server string, params *GetV1MeGetwithdrawalsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/me/getwithdrawals")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Before != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.After != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MessageId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "message_id", runtime.ParamLocationQuery, *params.MessageId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1MeSendchildorderRequest calls the generic PostV1MeSendchildorder builder with application/json body
func NewPostV1MeSendchildorderRequest(server string, body PostV1MeSendchildorderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1MeSendchildorderRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1MeSendchildorderRequestWithBody generates requests for PostV1MeSendchildorder with any type of body
func NewPostV1MeSendchildorderRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/me/sendchildorder")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV1MeSendparentorderRequest calls the generic PostV1MeSendparentorder builder with application/json body
func NewPostV1MeSendparentorderRequest(server string, body PostV1MeSendparentorderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1MeSendparentorderRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1MeSendparentorderRequestWithBody generates requests for PostV1MeSendparentorder with any type of body
func NewPostV1MeSendparentorderRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/me/sendparentorder")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV1MeWithdrawRequest calls the generic PostV1MeWithdraw builder with application/json body
func NewPostV1MeWithdrawRequest(server string, body PostV1MeWithdrawJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1MeWithdrawRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1MeWithdrawRequestWithBody generates requests for PostV1MeWithdraw with any type of body
func NewPostV1MeWithdrawRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/me/withdraw")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1TickerRequest generates requests for GetV1Ticker
func NewGetV1TickerRequest(server string, params *GetV1TickerParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/ticker")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "product_code", runtime.ParamLocationQuery, params.ProductCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetV1BoardWithResponse request
	GetV1BoardWithResponse(ctx context.Context, params *GetV1BoardParams, reqEditors ...RequestEditorFn) (*GetV1BoardResponse, error)

	// GetV1ExecutionsWithResponse request
	GetV1ExecutionsWithResponse(ctx context.Context, params *GetV1ExecutionsParams, reqEditors ...RequestEditorFn) (*GetV1ExecutionsResponse, error)

	// GetV1GetboardWithResponse request
	GetV1GetboardWithResponse(ctx context.Context, params *GetV1GetboardParams, reqEditors ...RequestEditorFn) (*GetV1GetboardResponse, error)

	// GetV1GetboardstateWithResponse request
	GetV1GetboardstateWithResponse(ctx context.Context, params *GetV1GetboardstateParams, reqEditors ...RequestEditorFn) (*GetV1GetboardstateResponse, error)

	// GetV1GetchatsWithResponse request
	GetV1GetchatsWithResponse(ctx context.Context, params *GetV1GetchatsParams, reqEditors ...RequestEditorFn) (*GetV1GetchatsResponse, error)

	// GetV1GetchatsEuWithResponse request
	GetV1GetchatsEuWithResponse(ctx context.Context, params *GetV1GetchatsEuParams, reqEditors ...RequestEditorFn) (*GetV1GetchatsEuResponse, error)

	// GetV1GetchatsUsaWithResponse request
	GetV1GetchatsUsaWithResponse(ctx context.Context, params *GetV1GetchatsUsaParams, reqEditors ...RequestEditorFn) (*GetV1GetchatsUsaResponse, error)

	// GetV1GetcorporateleverageWithResponse request
	GetV1GetcorporateleverageWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1GetcorporateleverageResponse, error)

	// GetV1GetexecutionsWithResponse request
	GetV1GetexecutionsWithResponse(ctx context.Context, params *GetV1GetexecutionsParams, reqEditors ...RequestEditorFn) (*GetV1GetexecutionsResponse, error)

	// GetV1GetfundingrateWithResponse request
	GetV1GetfundingrateWithResponse(ctx context.Context, params *GetV1GetfundingrateParams, reqEditors ...RequestEditorFn) (*GetV1GetfundingrateResponse, error)

	// GetV1GethealthWithResponse request
	GetV1GethealthWithResponse(ctx context.Context, params *GetV1GethealthParams, reqEditors ...RequestEditorFn) (*GetV1GethealthResponse, error)

	// GetV1GetmarketsWithResponse request
	GetV1GetmarketsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1GetmarketsResponse, error)

	// GetV1GetmarketsEuWithResponse request
	GetV1GetmarketsEuWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1GetmarketsEuResponse, error)

	// GetV1GetmarketsUsaWithResponse request
	GetV1GetmarketsUsaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1GetmarketsUsaResponse, error)

	// GetV1GettickerWithResponse request
	GetV1GettickerWithResponse(ctx context.Context, params *GetV1GettickerParams, reqEditors ...RequestEditorFn) (*GetV1GettickerResponse, error)

	// GetV1MarketsWithResponse request
	GetV1MarketsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1MarketsResponse, error)

	// GetV1MarketsEuWithResponse request
	GetV1MarketsEuWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1MarketsEuResponse, error)

	// GetV1MarketsUsaWithResponse request
	GetV1MarketsUsaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1MarketsUsaResponse, error)

	// PostV1MeCancelallchildordersWithBodyWithResponse request with any body
	PostV1MeCancelallchildordersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1MeCancelallchildordersResponse, error)

	PostV1MeCancelallchildordersWithResponse(ctx context.Context, body PostV1MeCancelallchildordersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1MeCancelallchildordersResponse, error)

	// PostV1MeCancelchildorderWithBodyWithResponse request with any body
	PostV1MeCancelchildorderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1MeCancelchildorderResponse, error)

	PostV1MeCancelchildorderWithResponse(ctx context.Context, body PostV1MeCancelchildorderJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1MeCancelchildorderResponse, error)

	// PostV1MeCancelparentorderWithBodyWithResponse request with any body
	PostV1MeCancelparentorderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1MeCancelparentorderResponse, error)

	PostV1MeCancelparentorderWithResponse(ctx context.Context, body PostV1MeCancelparentorderJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1MeCancelparentorderResponse, error)

	// GetV1MeGetaddressesWithResponse request
	GetV1MeGetaddressesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1MeGetaddressesResponse, error)

	// GetV1MeGetbalanceWithResponse request
	GetV1MeGetbalanceWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1MeGetbalanceResponse, error)

	// GetV1MeGetbalancehistoryWithResponse request
	GetV1MeGetbalancehistoryWithResponse(ctx context.Context, params *GetV1MeGetbalancehistoryParams, reqEditors ...RequestEditorFn) (*GetV1MeGetbalancehistoryResponse, error)

	// GetV1MeGetbankaccountsWithResponse request
	GetV1MeGetbankaccountsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1MeGetbankaccountsResponse, error)

	// GetV1MeGetchildordersWithResponse request
	GetV1MeGetchildordersWithResponse(ctx context.Context, params *GetV1MeGetchildordersParams, reqEditors ...RequestEditorFn) (*GetV1MeGetchildordersResponse, error)

	// GetV1MeGetcoininsWithResponse request
	GetV1MeGetcoininsWithResponse(ctx context.Context, params *GetV1MeGetcoininsParams, reqEditors ...RequestEditorFn) (*GetV1MeGetcoininsResponse, error)

	// GetV1MeGetcoinoutsWithResponse request
	GetV1MeGetcoinoutsWithResponse(ctx context.Context, params *GetV1MeGetcoinoutsParams, reqEditors ...RequestEditorFn) (*GetV1MeGetcoinoutsResponse, error)

	// GetV1MeGetcollateralWithResponse request
	GetV1MeGetcollateralWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1MeGetcollateralResponse, error)

	// GetV1MeGetcollateralaccountsWithResponse request
	GetV1MeGetcollateralaccountsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1MeGetcollateralaccountsResponse, error)

	// GetV1MeGetcollateralhistoryWithResponse request
	GetV1MeGetcollateralhistoryWithResponse(ctx context.Context, params *GetV1MeGetcollateralhistoryParams, reqEditors ...RequestEditorFn) (*GetV1MeGetcollateralhistoryResponse, error)

	// GetV1MeGetdepositsWithResponse request
	GetV1MeGetdepositsWithResponse(ctx context.Context, params *GetV1MeGetdepositsParams, reqEditors ...RequestEditorFn) (*GetV1MeGetdepositsResponse, error)

	// GetV1MeGetexecutionsWithResponse request
	GetV1MeGetexecutionsWithResponse(ctx context.Context, params *GetV1MeGetexecutionsParams, reqEditors ...RequestEditorFn) (*GetV1MeGetexecutionsResponse, error)

	// GetV1MeGetparentorderWithResponse request
	GetV1MeGetparentorderWithResponse(ctx context.Context, params *GetV1MeGetparentorderParams, reqEditors ...RequestEditorFn) (*GetV1MeGetparentorderResponse, error)

	// GetV1MeGetparentordersWithResponse request
	GetV1MeGetparentordersWithResponse(ctx context.Context, params *GetV1MeGetparentordersParams, reqEditors ...RequestEditorFn) (*GetV1MeGetparentordersResponse, error)

	// GetV1MeGetpermissionsWithResponse request
	GetV1MeGetpermissionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1MeGetpermissionsResponse, error)

	// GetV1MeGetpositionsWithResponse request
	GetV1MeGetpositionsWithResponse(ctx context.Context, params *GetV1MeGetpositionsParams, reqEditors ...RequestEditorFn) (*GetV1MeGetpositionsResponse, error)

	// GetV1MeGettradingcommissionWithResponse request
	GetV1MeGettradingcommissionWithResponse(ctx context.Context, params *GetV1MeGettradingcommissionParams, reqEditors ...RequestEditorFn) (*GetV1MeGettradingcommissionResponse, error)

	// GetV1MeGetwithdrawalsWithResponse request
	GetV1MeGetwithdrawalsWithResponse(ctx context.Context, params *GetV1MeGetwithdrawalsParams, reqEditors ...RequestEditorFn) (*GetV1MeGetwithdrawalsResponse, error)

	// PostV1MeSendchildorderWithBodyWithResponse request with any body
	PostV1MeSendchildorderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1MeSendchildorderResponse, error)

	PostV1MeSendchildorderWithResponse(ctx context.Context, body PostV1MeSendchildorderJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1MeSendchildorderResponse, error)

	// PostV1MeSendparentorderWithBodyWithResponse request with any body
	PostV1MeSendparentorderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1MeSendparentorderResponse, error)

	PostV1MeSendparentorderWithResponse(ctx context.Context, body PostV1MeSendparentorderJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1MeSendparentorderResponse, error)

	// PostV1MeWithdrawWithBodyWithResponse request with any body
	PostV1MeWithdrawWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1MeWithdrawResponse, error)

	PostV1MeWithdrawWithResponse(ctx context.Context, body PostV1MeWithdrawJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1MeWithdrawResponse, error)

	// GetV1TickerWithResponse request
	GetV1TickerWithResponse(ctx context.Context, params *GetV1TickerParams, reqEditors ...RequestEditorFn) (*GetV1TickerResponse, error)
}

type GetV1BoardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Board
}

// Status returns HTTPResponse.Status
func (r GetV1BoardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1BoardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ExecutionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]MarketExecution
}

// Status returns HTTPResponse.Status
func (r GetV1ExecutionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ExecutionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1GetboardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Board
}

// Status returns HTTPResponse.Status
func (r GetV1GetboardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1GetboardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1GetboardstateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BoardState
}

// Status returns HTTPResponse.Status
func (r GetV1GetboardstateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1GetboardstateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1GetchatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ChatMessage
}

// Status returns HTTPResponse.Status
func (r GetV1GetchatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1GetchatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1GetchatsEuResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ChatMessage
}

// Status returns HTTPResponse.Status
func (r GetV1GetchatsEuResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1GetchatsEuResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1GetchatsUsaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ChatMessage
}

// Status returns HTTPResponse.Status
func (r GetV1GetchatsUsaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1GetchatsUsaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1GetcorporateleverageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CorporateLeverage
}

// Status returns HTTPResponse.Status
func (r GetV1GetcorporateleverageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1GetcorporateleverageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1GetexecutionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]MarketExecution
}

// Status returns HTTPResponse.Status
func (r GetV1GetexecutionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1GetexecutionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1GetfundingrateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FundingRate
}

// Status returns HTTPResponse.Status
func (r GetV1GetfundingrateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1GetfundingrateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1GethealthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExchangeHealth
}

// Status returns HTTPResponse.Status
func (r GetV1GethealthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1GethealthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1GetmarketsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Market
}

// Status returns HTTPResponse.Status
func (r GetV1GetmarketsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1GetmarketsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1GetmarketsEuResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Market
}

// Status returns HTTPResponse.Status
func (r GetV1GetmarketsEuResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1GetmarketsEuResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1GetmarketsUsaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Market
}

// Status returns HTTPResponse.Status
func (r GetV1GetmarketsUsaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1GetmarketsUsaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1GettickerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Ticker
}

// Status returns HTTPResponse.Status
func (r GetV1GettickerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1GettickerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1MarketsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Market
}

// Status returns HTTPResponse.Status
func (r GetV1MarketsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1MarketsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1MarketsEuResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Market
}

// Status returns HTTPResponse.Status
func (r GetV1MarketsEuResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1MarketsEuResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1MarketsUsaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Market
}

// Status returns HTTPResponse.Status
func (r GetV1MarketsUsaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1MarketsUsaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1MeCancelallchildordersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostV1MeCancelallchildordersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1MeCancelallchildordersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1MeCancelchildorderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostV1MeCancelchildorderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1MeCancelchildorderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1MeCancelparentorderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostV1MeCancelparentorderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1MeCancelparentorderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1MeGetaddressesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Address
}

// Status returns HTTPResponse.Status
func (r GetV1MeGetaddressesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1MeGetaddressesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1MeGetbalanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Balance
}

// Status returns HTTPResponse.Status
func (r GetV1MeGetbalanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1MeGetbalanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1MeGetbalancehistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BalanceHistory
}

// Status returns HTTPResponse.Status
func (r GetV1MeGetbalancehistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1MeGetbalancehistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1MeGetbankaccountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BankAccount
}

// Status returns HTTPResponse.Status
func (r GetV1MeGetbankaccountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1MeGetbankaccountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1MeGetchildordersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ChildOrder
}

// Status returns HTTPResponse.Status
func (r GetV1MeGetchildordersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1MeGetchildordersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1MeGetcoininsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CoinIn
}

// Status returns HTTPResponse.Status
func (r GetV1MeGetcoininsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1MeGetcoininsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1MeGetcoinoutsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CoinOut
}

// Status returns HTTPResponse.Status
func (r GetV1MeGetcoinoutsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1MeGetcoinoutsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1MeGetcollateralResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Collateral
}

// Status returns HTTPResponse.Status
func (r GetV1MeGetcollateralResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1MeGetcollateralResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1MeGetcollateralaccountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CollateralAccount
}

// Status returns HTTPResponse.Status
func (r GetV1MeGetcollateralaccountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1MeGetcollateralaccountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1MeGetcollateralhistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CollateralHistory
}

// Status returns HTTPResponse.Status
func (r GetV1MeGetcollateralhistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1MeGetcollateralhistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1MeGetdepositsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CashDeposit
}

// Status returns HTTPResponse.Status
func (r GetV1MeGetdepositsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1MeGetdepositsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1MeGetexecutionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Execution
}

// Status returns HTTPResponse.Status
func (r GetV1MeGetexecutionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1MeGetexecutionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1MeGetparentorderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ParentOrderDetail
}

// Status returns HTTPResponse.Status
func (r GetV1MeGetparentorderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1MeGetparentorderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1MeGetparentordersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ParentOrder
}

// Status returns HTTPResponse.Status
func (r GetV1MeGetparentordersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1MeGetparentordersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1MeGetpermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
}

// Status returns HTTPResponse.Status
func (r GetV1MeGetpermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1MeGetpermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1MeGetpositionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Position
}

// Status returns HTTPResponse.Status
func (r GetV1MeGetpositionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1MeGetpositionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1MeGettradingcommissionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TradingCommission
}

// Status returns HTTPResponse.Status
func (r GetV1MeGettradingcommissionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1MeGettradingcommissionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1MeGetwithdrawalsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Withdrawal
}

// Status returns HTTPResponse.Status
func (r GetV1MeGetwithdrawalsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1MeGetwithdrawalsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1MeSendchildorderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChildOrderResult
}

// Status returns HTTPResponse.Status
func (r PostV1MeSendchildorderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1MeSendchildorderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1MeSendparentorderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ParentOrderResult
}

// Status returns HTTPResponse.Status
func (r PostV1MeSendparentorderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1MeSendparentorderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1MeWithdrawResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WithdrawResponse
}

// Status returns HTTPResponse.Status
func (r PostV1MeWithdrawResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1MeWithdrawResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1TickerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Ticker
}

// Status returns HTTPResponse.Status
func (r GetV1TickerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1TickerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetV1BoardWithResponse request returning *GetV1BoardResponse
func (c *ClientWithResponses) GetV1BoardWithResponse(ctx context.Context, params *GetV1BoardParams, reqEditors ...RequestEditorFn) (*GetV1BoardResponse, error) {
	rsp, err := c.GetV1Board(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1BoardResponse(rsp)
}

// GetV1ExecutionsWithResponse request returning *GetV1ExecutionsResponse
func (c *ClientWithResponses) GetV1ExecutionsWithResponse(ctx context.Context, params *GetV1ExecutionsParams, reqEditors ...RequestEditorFn) (*GetV1ExecutionsResponse, error) {
	rsp, err := c.GetV1Executions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ExecutionsResponse(rsp)
}

// GetV1GetboardWithResponse request returning *GetV1GetboardResponse
func (c *ClientWithResponses) GetV1GetboardWithResponse(ctx context.Context, params *GetV1GetboardParams, reqEditors ...RequestEditorFn) (*GetV1GetboardResponse, error) {
	rsp, err := c.GetV1Getboard(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1GetboardResponse(rsp)
}

// GetV1GetboardstateWithResponse request returning *GetV1GetboardstateResponse
func (c *ClientWithResponses) GetV1GetboardstateWithResponse(ctx context.Context, params *GetV1GetboardstateParams, reqEditors ...RequestEditorFn) (*GetV1GetboardstateResponse, error) {
	rsp, err := c.GetV1Getboardstate(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1GetboardstateResponse(rsp)
}

// GetV1GetchatsWithResponse request returning *GetV1GetchatsResponse
func (c *ClientWithResponses) GetV1GetchatsWithResponse(ctx context.Context, params *GetV1GetchatsParams, reqEditors ...RequestEditorFn) (*GetV1GetchatsResponse, error) {
	rsp, err := c.GetV1Getchats(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1GetchatsResponse(rsp)
}

// GetV1GetchatsEuWithResponse request returning *GetV1GetchatsEuResponse
func (c *ClientWithResponses) GetV1GetchatsEuWithResponse(ctx context.Context, params *GetV1GetchatsEuParams, reqEditors ...RequestEditorFn) (*GetV1GetchatsEuResponse, error) {
	rsp, err := c.GetV1GetchatsEu(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1GetchatsEuResponse(rsp)
}

// GetV1GetchatsUsaWithResponse request returning *GetV1GetchatsUsaResponse
func (c *ClientWithResponses) GetV1GetchatsUsaWithResponse(ctx context.Context, params *GetV1GetchatsUsaParams, reqEditors ...RequestEditorFn) (*GetV1GetchatsUsaResponse, error) {
	rsp, err := c.GetV1GetchatsUsa(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1GetchatsUsaResponse(rsp)
}

// GetV1GetcorporateleverageWithResponse request returning *GetV1GetcorporateleverageResponse
func (c *ClientWithResponses) GetV1GetcorporateleverageWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1GetcorporateleverageResponse, error) {
	rsp, err := c.GetV1Getcorporateleverage(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1GetcorporateleverageResponse(rsp)
}

// GetV1GetexecutionsWithResponse request returning *GetV1GetexecutionsResponse
func (c *ClientWithResponses) GetV1GetexecutionsWithResponse(ctx context.Context, params *GetV1GetexecutionsParams, reqEditors ...RequestEditorFn) (*GetV1GetexecutionsResponse, error) {
	rsp, err := c.GetV1Getexecutions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1GetexecutionsResponse(rsp)
}

// GetV1GetfundingrateWithResponse request returning *GetV1GetfundingrateResponse
func (c *ClientWithResponses) GetV1GetfundingrateWithResponse(ctx context.Context, params *GetV1GetfundingrateParams, reqEditors ...RequestEditorFn) (*GetV1GetfundingrateResponse, error) {
	rsp, err := c.GetV1Getfundingrate(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1GetfundingrateResponse(rsp)
}

// GetV1GethealthWithResponse request returning *GetV1GethealthResponse
func (c *ClientWithResponses) GetV1GethealthWithResponse(ctx context.Context, params *GetV1GethealthParams, reqEditors ...RequestEditorFn) (*GetV1GethealthResponse, error) {
	rsp, err := c.GetV1Gethealth(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1GethealthResponse(rsp)
}

// GetV1GetmarketsWithResponse request returning *GetV1GetmarketsResponse
func (c *ClientWithResponses) GetV1GetmarketsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1GetmarketsResponse, error) {
	rsp, err := c.GetV1Getmarkets(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1GetmarketsResponse(rsp)
}

// GetV1GetmarketsEuWithResponse request returning *GetV1GetmarketsEuResponse
func (c *ClientWithResponses) GetV1GetmarketsEuWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1GetmarketsEuResponse, error) {
	rsp, err := c.GetV1GetmarketsEu(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1GetmarketsEuResponse(rsp)
}

// GetV1GetmarketsUsaWithResponse request returning *GetV1GetmarketsUsaResponse
func (c *ClientWithResponses) GetV1GetmarketsUsaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1GetmarketsUsaResponse, error) {
	rsp, err := c.GetV1GetmarketsUsa(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1GetmarketsUsaResponse(rsp)
}

// GetV1GettickerWithResponse request returning *GetV1GettickerResponse
func (c *ClientWithResponses) GetV1GettickerWithResponse(ctx context.Context, params *GetV1GettickerParams, reqEditors ...RequestEditorFn) (*GetV1GettickerResponse, error) {
	rsp, err := c.GetV1Getticker(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1GettickerResponse(rsp)
}

// GetV1MarketsWithResponse request returning *GetV1MarketsResponse
func (c *ClientWithResponses) GetV1MarketsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1MarketsResponse, error) {
	rsp, err := c.GetV1Markets(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1MarketsResponse(rsp)
}

// GetV1MarketsEuWithResponse request returning *GetV1MarketsEuResponse
func (c *ClientWithResponses) GetV1MarketsEuWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1MarketsEuResponse, error) {
	rsp, err := c.GetV1MarketsEu(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1MarketsEuResponse(rsp)
}

// GetV1MarketsUsaWithResponse request returning *GetV1MarketsUsaResponse
func (c *ClientWithResponses) GetV1MarketsUsaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1MarketsUsaResponse, error) {
	rsp, err := c.GetV1MarketsUsa(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1MarketsUsaResponse(rsp)
}

// PostV1MeCancelallchildordersWithBodyWithResponse request with arbitrary body returning *PostV1MeCancelallchildordersResponse
func (c *ClientWithResponses) PostV1MeCancelallchildordersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1MeCancelallchildordersResponse, error) {
	rsp, err := c.PostV1MeCancelallchildordersWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1MeCancelallchildordersResponse(rsp)
}

func (c *ClientWithResponses) PostV1MeCancelallchildordersWithResponse(ctx context.Context, body PostV1MeCancelallchildordersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1MeCancelallchildordersResponse, error) {
	rsp, err := c.PostV1MeCancelallchildorders(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1MeCancelallchildordersResponse(rsp)
}

// PostV1MeCancelchildorderWithBodyWithResponse request with arbitrary body returning *PostV1MeCancelchildorderResponse
func (c *ClientWithResponses) PostV1MeCancelchildorderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1MeCancelchildorderResponse, error) {
	rsp, err := c.PostV1MeCancelchildorderWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1MeCancelchildorderResponse(rsp)
}

func (c *ClientWithResponses) PostV1MeCancelchildorderWithResponse(ctx context.Context, body PostV1MeCancelchildorderJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1MeCancelchildorderResponse, error) {
	rsp, err := c.PostV1MeCancelchildorder(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1MeCancelchildorderResponse(rsp)
}

// PostV1MeCancelparentorderWithBodyWithResponse request with arbitrary body returning *PostV1MeCancelparentorderResponse
func (c *ClientWithResponses) PostV1MeCancelparentorderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1MeCancelparentorderResponse, error) {
	rsp, err := c.PostV1MeCancelparentorderWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1MeCancelparentorderResponse(rsp)
}

func (c *ClientWithResponses) PostV1MeCancelparentorderWithResponse(ctx context.Context, body PostV1MeCancelparentorderJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1MeCancelparentorderResponse, error) {
	rsp, err := c.PostV1MeCancelparentorder(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1MeCancelparentorderResponse(rsp)
}

// GetV1MeGetaddressesWithResponse request returning *GetV1MeGetaddressesResponse
func (c *ClientWithResponses) GetV1MeGetaddressesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1MeGetaddressesResponse, error) {
	rsp, err := c.GetV1MeGetaddresses(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1MeGetaddressesResponse(rsp)
}

// GetV1MeGetbalanceWithResponse request returning *GetV1MeGetbalanceResponse
func (c *ClientWithResponses) GetV1MeGetbalanceWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1MeGetbalanceResponse, error) {
	rsp, err := c.GetV1MeGetbalance(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1MeGetbalanceResponse(rsp)
}

// GetV1MeGetbalancehistoryWithResponse request returning *GetV1MeGetbalancehistoryResponse
func (c *ClientWithResponses) GetV1MeGetbalancehistoryWithResponse(ctx context.Context, params *GetV1MeGetbalancehistoryParams, reqEditors ...RequestEditorFn) (*GetV1MeGetbalancehistoryResponse, error) {
	rsp, err := c.GetV1MeGetbalancehistory(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1MeGetbalancehistoryResponse(rsp)
}

// GetV1MeGetbankaccountsWithResponse request returning *GetV1MeGetbankaccountsResponse
func (c *ClientWithResponses) GetV1MeGetbankaccountsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1MeGetbankaccountsResponse, error) {
	rsp, err := c.GetV1MeGetbankaccounts(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1MeGetbankaccountsResponse(rsp)
}

// GetV1MeGetchildordersWithResponse request returning *GetV1MeGetchildordersResponse
func (c *ClientWithResponses) GetV1MeGetchildordersWithResponse(ctx context.Context, params *GetV1MeGetchildordersParams, reqEditors ...RequestEditorFn) (*GetV1MeGetchildordersResponse, error) {
	rsp, err := c.GetV1MeGetchildorders(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1MeGetchildordersResponse(rsp)
}

// GetV1MeGetcoininsWithResponse request returning *GetV1MeGetcoininsResponse
func (c *ClientWithResponses) GetV1MeGetcoininsWithResponse(ctx context.Context, params *GetV1MeGetcoininsParams, reqEditors ...RequestEditorFn) (*GetV1MeGetcoininsResponse, error) {
	rsp, err := c.GetV1MeGetcoinins(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1MeGetcoininsResponse(rsp)
}

// GetV1MeGetcoinoutsWithResponse request returning *GetV1MeGetcoinoutsResponse
func (c *ClientWithResponses) GetV1MeGetcoinoutsWithResponse(ctx context.Context, params *GetV1MeGetcoinoutsParams, reqEditors ...RequestEditorFn) (*GetV1MeGetcoinoutsResponse, error) {
	rsp, err := c.GetV1MeGetcoinouts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1MeGetcoinoutsResponse(rsp)
}

// GetV1MeGetcollateralWithResponse request returning *GetV1MeGetcollateralResponse
func (c *ClientWithResponses) GetV1MeGetcollateralWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1MeGetcollateralResponse, error) {
	rsp, err := c.GetV1MeGetcollateral(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1MeGetcollateralResponse(rsp)
}

// GetV1MeGetcollateralaccountsWithResponse request returning *GetV1MeGetcollateralaccountsResponse
func (c *ClientWithResponses) GetV1MeGetcollateralaccountsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1MeGetcollateralaccountsResponse, error) {
	rsp, err := c.GetV1MeGetcollateralaccounts(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1MeGetcollateralaccountsResponse(rsp)
}

// GetV1MeGetcollateralhistoryWithResponse request returning *GetV1MeGetcollateralhistoryResponse
func (c *ClientWithResponses) GetV1MeGetcollateralhistoryWithResponse(ctx context.Context, params *GetV1MeGetcollateralhistoryParams, reqEditors ...RequestEditorFn) (*GetV1MeGetcollateralhistoryResponse, error) {
	rsp, err := c.GetV1MeGetcollateralhistory(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1MeGetcollateralhistoryResponse(rsp)
}

// GetV1MeGetdepositsWithResponse request returning *GetV1MeGetdepositsResponse
func (c *ClientWithResponses) GetV1MeGetdepositsWithResponse(ctx context.Context, params *GetV1MeGetdepositsParams, reqEditors ...RequestEditorFn) (*GetV1MeGetdepositsResponse, error) {
	rsp, err := c.GetV1MeGetdeposits(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1MeGetdepositsResponse(rsp)
}

// GetV1MeGetexecutionsWithResponse request returning *GetV1MeGetexecutionsResponse
func (c *ClientWithResponses) GetV1MeGetexecutionsWithResponse(ctx context.Context, params *GetV1MeGetexecutionsParams, reqEditors ...RequestEditorFn) (*GetV1MeGetexecutionsResponse, error) {
	rsp, err := c.GetV1MeGetexecutions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1MeGetexecutionsResponse(rsp)
}

// GetV1MeGetparentorderWithResponse request returning *GetV1MeGetparentorderResponse
func (c *ClientWithResponses) GetV1MeGetparentorderWithResponse(ctx context.Context, params *GetV1MeGetparentorderParams, reqEditors ...RequestEditorFn) (*GetV1MeGetparentorderResponse, error) {
	rsp, err := c.GetV1MeGetparentorder(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1MeGetparentorderResponse(rsp)
}

// GetV1MeGetparentordersWithResponse request returning *GetV1MeGetparentordersResponse
func (c *ClientWithResponses) GetV1MeGetparentordersWithResponse(ctx context.Context, params *GetV1MeGetparentordersParams, reqEditors ...RequestEditorFn) (*GetV1MeGetparentordersResponse, error) {
	rsp, err := c.GetV1MeGetparentorders(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1MeGetparentordersResponse(rsp)
}

// GetV1MeGetpermissionsWithResponse request returning *GetV1MeGetpermissionsResponse
func (c *ClientWithResponses) GetV1MeGetpermissionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1MeGetpermissionsResponse, error) {
	rsp, err := c.GetV1MeGetpermissions(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1MeGetpermissionsResponse(rsp)
}

// GetV1MeGetpositionsWithResponse request returning *GetV1MeGetpositionsResponse
func (c *ClientWithResponses) GetV1MeGetpositionsWithResponse(ctx context.Context, params *GetV1MeGetpositionsParams, reqEditors ...RequestEditorFn) (*GetV1MeGetpositionsResponse, error) {
	rsp, err := c.GetV1MeGetpositions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1MeGetpositionsResponse(rsp)
}

// GetV1MeGettradingcommissionWithResponse request returning *GetV1MeGettradingcommissionResponse
func (c *ClientWithResponses) GetV1MeGettradingcommissionWithResponse(ctx context.Context, params *GetV1MeGettradingcommissionParams, reqEditors ...RequestEditorFn) (*GetV1MeGettradingcommissionResponse, error) {
	rsp, err := c.GetV1MeGettradingcommission(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1MeGettradingcommissionResponse(rsp)
}

// GetV1MeGetwithdrawalsWithResponse request returning *GetV1MeGetwithdrawalsResponse
func (c *ClientWithResponses) GetV1MeGetwithdrawalsWithResponse(ctx context.Context, params *GetV1MeGetwithdrawalsParams, reqEditors ...RequestEditorFn) (*GetV1MeGetwithdrawalsResponse, error) {
	rsp, err := c.GetV1MeGetwithdrawals(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1MeGetwithdrawalsResponse(rsp)
}

// PostV1MeSendchildorderWithBodyWithResponse request with arbitrary body returning *PostV1MeSendchildorderResponse
func (c *ClientWithResponses) PostV1MeSendchildorderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1MeSendchildorderResponse, error) {
	rsp, err := c.PostV1MeSendchildorderWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1MeSendchildorderResponse(rsp)
}

func (c *ClientWithResponses) PostV1MeSendchildorderWithResponse(ctx context.Context, body PostV1MeSendchildorderJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1MeSendchildorderResponse, error) {
	rsp, err := c.PostV1MeSendchildorder(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1MeSendchildorderResponse(rsp)
}

// PostV1MeSendparentorderWithBodyWithResponse request with arbitrary body returning *PostV1MeSendparentorderResponse
func (c *ClientWithResponses) PostV1MeSendparentorderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1MeSendparentorderResponse, error) {
	rsp, err := c.PostV1MeSendparentorderWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1MeSendparentorderResponse(rsp)
}

func (c *ClientWithResponses) PostV1MeSendparentorderWithResponse(ctx context.Context, body PostV1MeSendparentorderJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1MeSendparentorderResponse, error) {
	rsp, err := c.PostV1MeSendparentorder(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1MeSendparentorderResponse(rsp)
}

// PostV1MeWithdrawWithBodyWithResponse request with arbitrary body returning *PostV1MeWithdrawResponse
func (c *ClientWithResponses) PostV1MeWithdrawWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1MeWithdrawResponse, error) {
	rsp, err := c.PostV1MeWithdrawWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1MeWithdrawResponse(rsp)
}

func (c *ClientWithResponses) PostV1MeWithdrawWithResponse(ctx context.Context, body PostV1MeWithdrawJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1MeWithdrawResponse, error) {
	rsp, err := c.PostV1MeWithdraw(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1MeWithdrawResponse(rsp)
}

// GetV1TickerWithResponse request returning *GetV1TickerResponse
func (c *ClientWithResponses) GetV1TickerWithResponse(ctx context.Context, params *GetV1TickerParams, reqEditors ...RequestEditorFn) (*GetV1TickerResponse, error) {
	rsp, err := c.GetV1Ticker(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1TickerResponse(rsp)
}

// ParseGetV1BoardResponse parses an HTTP response from a GetV1BoardWithResponse call
func ParseGetV1BoardResponse(rsp *http.Response) (*GetV1BoardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1BoardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Board
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1ExecutionsResponse parses an HTTP response from a GetV1ExecutionsWithResponse call
func ParseGetV1ExecutionsResponse(rsp *http.Response) (*GetV1ExecutionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ExecutionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []MarketExecution
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1GetboardResponse parses an HTTP response from a GetV1GetboardWithResponse call
func ParseGetV1GetboardResponse(rsp *http.Response) (*GetV1GetboardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1GetboardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Board
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1GetboardstateResponse parses an HTTP response from a GetV1GetboardstateWithResponse call
func ParseGetV1GetboardstateResponse(rsp *http.Response) (*GetV1GetboardstateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1GetboardstateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BoardState
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1GetchatsResponse parses an HTTP response from a GetV1GetchatsWithResponse call
func ParseGetV1GetchatsResponse(rsp *http.Response) (*GetV1GetchatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1GetchatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ChatMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1GetchatsEuResponse parses an HTTP response from a GetV1GetchatsEuWithResponse call
func ParseGetV1GetchatsEuResponse(rsp *http.Response) (*GetV1GetchatsEuResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1GetchatsEuResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ChatMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1GetchatsUsaResponse parses an HTTP response from a GetV1GetchatsUsaWithResponse call
func ParseGetV1GetchatsUsaResponse(rsp *http.Response) (*GetV1GetchatsUsaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1GetchatsUsaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ChatMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1GetcorporateleverageResponse parses an HTTP response from a GetV1GetcorporateleverageWithResponse call
func ParseGetV1GetcorporateleverageResponse(rsp *http.Response) (*GetV1GetcorporateleverageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1GetcorporateleverageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CorporateLeverage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1GetexecutionsResponse parses an HTTP response from a GetV1GetexecutionsWithResponse call
func ParseGetV1GetexecutionsResponse(rsp *http.Response) (*GetV1GetexecutionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1GetexecutionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []MarketExecution
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1GetfundingrateResponse parses an HTTP response from a GetV1GetfundingrateWithResponse call
func ParseGetV1GetfundingrateResponse(rsp *http.Response) (*GetV1GetfundingrateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1GetfundingrateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FundingRate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1GethealthResponse parses an HTTP response from a GetV1GethealthWithResponse call
func ParseGetV1GethealthResponse(rsp *http.Response) (*GetV1GethealthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1GethealthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExchangeHealth
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1GetmarketsResponse parses an HTTP response from a GetV1GetmarketsWithResponse call
func ParseGetV1GetmarketsResponse(rsp *http.Response) (*GetV1GetmarketsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1GetmarketsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Market
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1GetmarketsEuResponse parses an HTTP response from a GetV1GetmarketsEuWithResponse call
func ParseGetV1GetmarketsEuResponse(rsp *http.Response) (*GetV1GetmarketsEuResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1GetmarketsEuResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Market
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1GetmarketsUsaResponse parses an HTTP response from a GetV1GetmarketsUsaWithResponse call
func ParseGetV1GetmarketsUsaResponse(rsp *http.Response) (*GetV1GetmarketsUsaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1GetmarketsUsaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Market
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1GettickerResponse parses an HTTP response from a GetV1GettickerWithResponse call
func ParseGetV1GettickerResponse(rsp *http.Response) (*GetV1GettickerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1GettickerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Ticker
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1MarketsResponse parses an HTTP response from a GetV1MarketsWithResponse call
func ParseGetV1MarketsResponse(rsp *http.Response) (*GetV1MarketsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1MarketsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Market
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1MarketsEuResponse parses an HTTP response from a GetV1MarketsEuWithResponse call
func ParseGetV1MarketsEuResponse(rsp *http.Response) (*GetV1MarketsEuResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1MarketsEuResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Market
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1MarketsUsaResponse parses an HTTP response from a GetV1MarketsUsaWithResponse call
func ParseGetV1MarketsUsaResponse(rsp *http.Response) (*GetV1MarketsUsaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1MarketsUsaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Market
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1MeCancelallchildordersResponse parses an HTTP response from a PostV1MeCancelallchildordersWithResponse call
func ParsePostV1MeCancelallchildordersResponse(rsp *http.Response) (*PostV1MeCancelallchildordersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1MeCancelallchildordersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostV1MeCancelchildorderResponse parses an HTTP response from a PostV1MeCancelchildorderWithResponse call
func ParsePostV1MeCancelchildorderResponse(rsp *http.Response) (*PostV1MeCancelchildorderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1MeCancelchildorderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostV1MeCancelparentorderResponse parses an HTTP response from a PostV1MeCancelparentorderWithResponse call
func ParsePostV1MeCancelparentorderResponse(rsp *http.Response) (*PostV1MeCancelparentorderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1MeCancelparentorderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV1MeGetaddressesResponse parses an HTTP response from a GetV1MeGetaddressesWithResponse call
func ParseGetV1MeGetaddressesResponse(rsp *http.Response) (*GetV1MeGetaddressesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1MeGetaddressesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Address
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1MeGetbalanceResponse parses an HTTP response from a GetV1MeGetbalanceWithResponse call
func ParseGetV1MeGetbalanceResponse(rsp *http.Response) (*GetV1MeGetbalanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1MeGetbalanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Balance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1MeGetbalancehistoryResponse parses an HTTP response from a GetV1MeGetbalancehistoryWithResponse call
func ParseGetV1MeGetbalancehistoryResponse(rsp *http.Response) (*GetV1MeGetbalancehistoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1MeGetbalancehistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BalanceHistory
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1MeGetbankaccountsResponse parses an HTTP response from a GetV1MeGetbankaccountsWithResponse call
func ParseGetV1MeGetbankaccountsResponse(rsp *http.Response) (*GetV1MeGetbankaccountsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1MeGetbankaccountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BankAccount
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1MeGetchildordersResponse parses an HTTP response from a GetV1MeGetchildordersWithResponse call
func ParseGetV1MeGetchildordersResponse(rsp *http.Response) (*GetV1MeGetchildordersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1MeGetchildordersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ChildOrder
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1MeGetcoininsResponse parses an HTTP response from a GetV1MeGetcoininsWithResponse call
func ParseGetV1MeGetcoininsResponse(rsp *http.Response) (*GetV1MeGetcoininsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1MeGetcoininsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CoinIn
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1MeGetcoinoutsResponse parses an HTTP response from a GetV1MeGetcoinoutsWithResponse call
func ParseGetV1MeGetcoinoutsResponse(rsp *http.Response) (*GetV1MeGetcoinoutsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1MeGetcoinoutsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CoinOut
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1MeGetcollateralResponse parses an HTTP response from a GetV1MeGetcollateralWithResponse call
func ParseGetV1MeGetcollateralResponse(rsp *http.Response) (*GetV1MeGetcollateralResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1MeGetcollateralResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Collateral
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1MeGetcollateralaccountsResponse parses an HTTP response from a GetV1MeGetcollateralaccountsWithResponse call
func ParseGetV1MeGetcollateralaccountsResponse(rsp *http.Response) (*GetV1MeGetcollateralaccountsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1MeGetcollateralaccountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CollateralAccount
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1MeGetcollateralhistoryResponse parses an HTTP response from a GetV1MeGetcollateralhistoryWithResponse call
func ParseGetV1MeGetcollateralhistoryResponse(rsp *http.Response) (*GetV1MeGetcollateralhistoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1MeGetcollateralhistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CollateralHistory
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1MeGetdepositsResponse parses an HTTP response from a GetV1MeGetdepositsWithResponse call
func ParseGetV1MeGetdepositsResponse(rsp *http.Response) (*GetV1MeGetdepositsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1MeGetdepositsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CashDeposit
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1MeGetexecutionsResponse parses an HTTP response from a GetV1MeGetexecutionsWithResponse call
func ParseGetV1MeGetexecutionsResponse(rsp *http.Response) (*GetV1MeGetexecutionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1MeGetexecutionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Execution
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1MeGetparentorderResponse parses an HTTP response from a GetV1MeGetparentorderWithResponse call
func ParseGetV1MeGetparentorderResponse(rsp *http.Response) (*GetV1MeGetparentorderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1MeGetparentorderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ParentOrderDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1MeGetparentordersResponse parses an HTTP response from a GetV1MeGetparentordersWithResponse call
func ParseGetV1MeGetparentordersResponse(rsp *http.Response) (*GetV1MeGetparentordersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1MeGetparentordersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ParentOrder
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1MeGetpermissionsResponse parses an HTTP response from a GetV1MeGetpermissionsWithResponse call
func ParseGetV1MeGetpermissionsResponse(rsp *http.Response) (*GetV1MeGetpermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1MeGetpermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1MeGetpositionsResponse parses an HTTP response from a GetV1MeGetpositionsWithResponse call
func ParseGetV1MeGetpositionsResponse(rsp *http.Response) (*GetV1MeGetpositionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1MeGetpositionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Position
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1MeGettradingcommissionResponse parses an HTTP response from a GetV1MeGettradingcommissionWithResponse call
func ParseGetV1MeGettradingcommissionResponse(rsp *http.Response) (*GetV1MeGettradingcommissionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1MeGettradingcommissionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TradingCommission
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1MeGetwithdrawalsResponse parses an HTTP response from a GetV1MeGetwithdrawalsWithResponse call
func ParseGetV1MeGetwithdrawalsResponse(rsp *http.Response) (*GetV1MeGetwithdrawalsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1MeGetwithdrawalsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Withdrawal
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1MeSendchildorderResponse parses an HTTP response from a PostV1MeSendchildorderWithResponse call
func ParsePostV1MeSendchildorderResponse(rsp *http.Response) (*PostV1MeSendchildorderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1MeSendchildorderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChildOrderResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1MeSendparentorderResponse parses an HTTP response from a PostV1MeSendparentorderWithResponse call
func ParsePostV1MeSendparentorderResponse(rsp *http.Response) (*PostV1MeSendparentorderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1MeSendparentorderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ParentOrderResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1MeWithdrawResponse parses an HTTP response from a PostV1MeWithdrawWithResponse call
func ParsePostV1MeWithdrawResponse(rsp *http.Response) (*PostV1MeWithdrawResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1MeWithdrawResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WithdrawResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1TickerResponse parses an HTTP response from a GetV1TickerWithResponse call
func ParseGetV1TickerResponse(rsp *http.Response) (*GetV1TickerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1TickerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Ticker
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
